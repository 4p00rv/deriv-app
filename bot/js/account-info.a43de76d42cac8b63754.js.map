{"version":3,"sources":["webpack:///./App/Containers/AccountSwitcher/account-switcher.jsx","webpack:///./App/Components/Layout/Header/account-info.jsx"],"names":["AccountSwitcher","setWrapperRef","node","wrapper_ref","handleClickOutside","event","accounts_toggle_btn","target","classList","contains","props","is_visible","toggle","handleLogout","is_positions_drawer_on","togglePositionsDrawer","requestLogout","then","cleanUp","React","Component","document","addEventListener","this","removeEventListener","loginid","account_loginid","switchAccount","is_logged_in","real_accounts","account_list","filter","acc","is_virtual","vrt_account","find","main_account_title","length","localize","UpgradeButton","text","className","href","urlFor","undefined","rel","ref","map","account","key","classNames","onClick","doSwitch","bind","icon","type","is_upgrade_enabled","upgrade_info","can_open_multi","isEmptyObject","virtual_loginid","propTypes","PropTypes","array","string","func","clearError","has_error","bool","onClickUpgrade","object","account_switcher","connect","client","ui","virtual_account_loginid","AccountInfo","balance","currency","is_dialog_on","toggleDialog","id","title","toLowerCase","in","timeout","enter","enterDone","exit","unmountOnExit","account_type"],"mappings":"6nCAUMA,E,yQACFC,cAAgB,SAACC,GACb,EAAKC,YAAcD,G,EAGvBE,mBAAqB,SAACC,GAClB,IAAMC,GAAwBD,EAAME,OAAOC,UAAUC,SAAS,YAC1D,EAAKN,cAAgB,EAAKA,YAAYM,SAASJ,EAAME,SAClD,EAAKG,MAAMC,YAAcL,GAC5B,EAAKI,MAAME,U,EAInBC,aAAe,WACX,EAAKH,MAAME,SACP,EAAKF,MAAMI,wBACX,EAAKJ,MAAMK,wBAEfC,cAAgBC,KAAK,EAAKP,MAAMQ,U,4PAlBVC,IAAMC,W,kDAsB5BC,SAASC,iBAAiB,YAAaC,KAAKnB,sB,6CAI5CiB,SAASG,oBAAoB,YAAaD,KAAKnB,sB,4DAGpCqB,G,kFACXF,KAAKb,MAAME,SACPW,KAAKb,MAAMgB,kBAAoBD,E,iEAC7BF,KAAKb,MAAMiB,cAAcF,G,wSAO1B,WACL,IAAKF,KAAKb,MAAMkB,aAAc,OAAO,EAGrC,IAAMC,EAAgBN,KAAKb,MAAMoB,aAAaC,OAAO,SAAAC,GAAG,OAAKA,EAAIC,aAC3DC,EAAgBX,KAAKb,MAAMoB,aAAaK,KAAK,SAAAH,GAAG,OAAIA,EAAIC,aAExDG,EAAqBP,EAAcQ,OAAS,EAAIC,mBAAS,iBAAmBA,mBAAS,gBAErFC,EAAgB,SAAC,GAAD,IAAGC,EAAH,EAAGA,KAAH,OAClB,yBAAKC,UAAU,6BACX,uBACIA,UAAU,iCACVC,KAAMC,iBAAO,qBAAiBC,OAAWA,GAAW,GACpDC,IAAI,sBACJtC,OAAO,UAENiC,KAKb,OACI,yBAAKC,UAAU,qBAAqBK,IAAKvB,KAAKtB,kBAGnCsB,KAAKb,MAAMoB,aAAaO,SAAUR,EAAcQ,SACnD,yBAAKI,UAAU,4BACX,0BAAMA,UAAU,4BACXL,GAEL,yBAAKK,UAAU,0BAEPZ,EAAckB,IAAI,SAACC,GAAD,OACd,yBACIC,IAAKD,EAAQvB,QACbgB,UAAWS,IAAW,wBAAyB,CAC3C,kCAAoCF,EAAQvB,UAAY,EAAKf,MAAMgB,kBAEvEyB,QAAS,EAAKC,SAASC,KAAK,EAAML,EAAQvB,UAE1C,0BAAMgB,UAAW,oBACb,kBAAC,IAAD,CACIa,KAAK,uBACLb,UAAS,uDAAkDO,EAAQM,MACnEC,KAAMP,EAAQM,OAEjBN,EAAQvB,gBAStBF,KAAKb,MAAM8C,qBAAsBjC,KAAKb,MAAM+C,aAAaC,iBAC5D,kBAACnB,EAAD,CAAeC,KAAMF,mBAAS,uBAKrCqB,wBAAczB,IACf,yBAAKO,UAAU,+BACX,0BAAMA,UAAU,4BACXH,mBAAS,oBAEd,yBAAKG,UAAU,0BACX,yBACIA,UAAWS,IAAW,wBAAyB,CAC3C,kCAAoC3B,KAAKb,MAAMkD,kBAAoBrC,KAAKb,MAAMgB,kBAElFyB,QAAS5B,KAAK6B,SAASC,KAAK9B,KAAMA,KAAKb,MAAMkD,kBAE7C,0BAAMnB,UAAWS,IAAW,mBAAoB,8BAC3C3B,KAAKb,MAAMkD,uBAM3BrC,KAAKb,MAAM8C,qBAAsBjC,KAAKb,MAAMuB,aAC7C,kBAACM,EAAD,CAAeC,KAAMF,mBAAS,6BAElC,yBAAKG,UAAU,uBAAuBU,QAAS5B,KAAKV,cAChD,0BAAM4B,UAAU,6BAA6BH,mBAAS,YACtD,kBAAC,IAAD,CAAMgB,KAAK,aAAab,UAAU,kD,gCAOtDzC,EAAgB6D,UAAY,CACxB/B,aAAwBgC,IAAUC,MAClCrC,gBAAwBoC,IAAUE,OAClC9C,QAAwB4C,IAAUG,KAClCC,WAAwBJ,IAAUG,KAClCE,UAAwBL,IAAUM,KAClCxC,aAAwBkC,IAAUM,KAClCtD,uBAAwBgD,IAAUM,KAClCZ,mBAAwBM,IAAUM,KAClCnC,WAAwB6B,IAAUM,KAClCzD,WAAwBmD,IAAUM,KAClCC,eAAwBP,IAAUG,KAClCrD,OAAwBkD,IAAUG,KAClClD,sBAAwB+C,IAAUG,KAClCR,aAAwBK,IAAUQ,OAClCV,gBAAwBE,IAAUE,QAGtC,IAAMO,EAAmBC,YACrB,gBAAGC,EAAH,EAAGA,OAAQC,EAAX,EAAWA,GAAX,MAAoC,CAChC5C,aAAwB2C,EAAO3C,aAC/BJ,gBAAwB+C,EAAOhD,QAC/BG,aAAwB6C,EAAO7C,aAC/BK,WAAwBwC,EAAOxC,WAC/BN,cAAwB8C,EAAO9C,cAC/B8B,aAAwBgB,EAAOhB,aAC/BvC,QAAwBuD,EAAOvD,QAC/B0C,gBAAwBa,EAAOE,wBAG/B7D,uBAAwB4D,EAAG5D,uBAC3BC,sBAAwB2D,EAAG3D,wBAbVyD,CAevBxE,GCtKF,IAAM4E,EAAc,SAAC,GAAD,I,MAChBC,EADgB,EAChBA,QACAC,EAFgB,EAEhBA,SACArD,EAHgB,EAGhBA,QACAsD,EAJgB,EAIhBA,aACAvB,EALgB,EAKhBA,mBACAvB,EANgB,EAMhBA,WACAoC,EAPgB,EAOhBA,eACAW,EARgB,EAQhBA,aARgB,OAUhB,yBAAKvC,UAAU,qBACX,yBACIwC,GAAG,sBACHxC,UAAWS,IAAW,WAAY,CAC9B,iBAAwB6B,EACxB,uBAAwB9C,IAE5BkB,QAAS6B,GAET,uBACIvC,UAAU,eACVyC,MAAOzD,GAENA,EAJL,UAOuB,IAAZoD,GACP,uBAAGpC,UAAU,qBACT,0BACIA,UAAWS,IAAW,W,EAAD,G,EAAA,oBAA4B4B,GAAY,IAAIK,e,EAAkBL,E,mGAEtFD,GAGT,kBAAC,IAAD,CAAMvB,KAAK,gBAAgBb,UAAU,4BAEzC,kBAAC,gBAAD,CACI2C,GAAIL,EACJM,QAAS,IACTnC,WAAY,CACRoC,MAAW,+BACXC,UAAW,oCACXC,KAAW,+BAEfC,eAAa,GAEb,yBAAKhD,UAAU,yBACX,kBAAC,EAAD,CACI9B,WAAYoE,EACZnE,OAAQoE,EACRxB,mBAAoBA,EACpBa,eAAgBA,QAOpCO,EAAYf,UAAY,CACpB6B,aAAoB5B,IAAUE,OAC9Ba,QAAoBf,IAAUE,OAC9Bc,SAAoBhB,IAAUE,OAC9Be,aAAoBjB,IAAUM,KAC9BZ,mBAAoBM,IAAUM,KAC9BnC,WAAoB6B,IAAUM,KAC9B3C,QAAoBqC,IAAUE,OAC9BK,eAAoBP,IAAUG,KAC9Be,aAAoBlB,IAAUG,MAGnBW","file":"js/account-info.a43de76d42cac8b63754.js","sourcesContent":["import classNames        from 'classnames';\nimport PropTypes         from 'prop-types';\nimport React             from 'react';\nimport { localize }      from 'App/i18n';\nimport { urlFor }        from '_common/url';\nimport { isEmptyObject } from '_common/utility';\nimport Icon              from 'Assets/icon.jsx';\nimport { requestLogout } from 'Services/index';\nimport { connect }       from 'Stores/connect';\n\nclass AccountSwitcher extends React.Component {\n    setWrapperRef = (node) => {\n        this.wrapper_ref = node;\n    };\n\n    handleClickOutside = (event) => {\n        const accounts_toggle_btn = !(event.target.classList.contains('acc-info'));\n        if (this.wrapper_ref && !this.wrapper_ref.contains(event.target)\n            && this.props.is_visible && accounts_toggle_btn) {\n            this.props.toggle();\n        }\n    };\n\n    handleLogout = () => {\n        this.props.toggle();\n        if (this.props.is_positions_drawer_on) {\n            this.props.togglePositionsDrawer(); // TODO: hide drawer inside logout, once it is a mobx action\n        }\n        requestLogout().then(this.props.cleanUp);\n    };\n\n    componentDidMount() {\n        document.addEventListener('mousedown', this.handleClickOutside);\n    }\n\n    componentWillUnmount() {\n        document.removeEventListener('mousedown', this.handleClickOutside);\n    }\n\n    async doSwitch(loginid) {\n        this.props.toggle();\n        if (this.props.account_loginid === loginid) return;\n        await this.props.switchAccount(loginid);\n\n        /* if (this.props.has_error) {\n            this.props.clearError();\n        } */\n    }\n\n    render() {\n        if (!this.props.is_logged_in) return false;\n        // TODO: Once we allow other real accounts (apart from CR), assign correct title and group accounts into list with correct account title/types\n        // e.g - Real, Financial, Gaming, Investment\n        const real_accounts = this.props.account_list.filter(acc => !acc.is_virtual);\n        const vrt_account   = this.props.account_list.find(acc => acc.is_virtual);\n\n        const main_account_title = real_accounts.length > 1 ? localize('Real accounts') : localize('Real account');\n\n        const UpgradeButton = ({ text }) => (\n            <div className='acc-switcher__new-account'>\n                <a\n                    className='acc-switcher__new-account-link'\n                    href={urlFor('user/accounts', undefined, undefined, true)}\n                    rel='noopener noreferrer'\n                    target='_blank'\n                >\n                    {text}\n                </a>\n            </div>\n        );\n\n        return (\n            <div className='acc-switcher__list' ref={this.setWrapperRef}>\n                {\n                    // Make sure this block is not rendered if there are no real accounts\n                    !!(this.props.account_list.length && real_accounts.length) &&\n                    <div className='acc-switcher__list-group'>\n                        <span className='acc-switcher__list-title'>\n                            {main_account_title}\n                        </span>\n                        <div className='acc-switcher__accounts'>\n                            {\n                                real_accounts.map((account) => (\n                                    <div\n                                        key={account.loginid}\n                                        className={classNames('acc-switcher__account', {\n                                            'acc-switcher__account--selected': (account.loginid === this.props.account_loginid),\n                                        })}\n                                        onClick={this.doSwitch.bind(this, account.loginid)}\n                                    >\n                                        <span className={'acc-switcher__id'}>\n                                            <Icon\n                                                icon='IconAccountsCurrency'\n                                                className={`acc-switcher__id-icon acc-switcher__id-icon--${account.icon}`}\n                                                type={account.icon}\n                                            />\n                                            {account.loginid}\n                                        </span>\n                                    </div>\n                                ))\n                            }\n                        </div>\n\n                        {   // TODO: Add link to account opening page for upgrade or multi account page for new account.\n                            // Update text below for handling types of account to create :- e.g - Investment\n                            !!(this.props.is_upgrade_enabled && this.props.upgrade_info.can_open_multi) &&\n                            <UpgradeButton text={localize('Add new account')} />\n                        }\n                    </div>\n                }\n                {\n                    !isEmptyObject(vrt_account) &&\n                    <div className='acc-switcher__list--virtual'>\n                        <span className='acc-switcher__list-title'>\n                            {localize('Virtual account')}\n                        </span>\n                        <div className='acc-switcher__accounts'>\n                            <div\n                                className={classNames('acc-switcher__account', {\n                                    'acc-switcher__account--selected': (this.props.virtual_loginid === this.props.account_loginid),\n                                })}\n                                onClick={this.doSwitch.bind(this, this.props.virtual_loginid)}\n                            >\n                                <span className={classNames('acc-switcher__id', 'acc-switcher__id--virtual')}>\n                                    {this.props.virtual_loginid}\n                                </span>\n                            </div>\n                        </div>\n                    </div>\n                }\n                { !!(this.props.is_upgrade_enabled && this.props.is_virtual) &&\n                    <UpgradeButton text={localize('Upgrade to Real Account')} />\n                }\n                <div className='acc-switcher__logout' onClick={this.handleLogout}>\n                    <span className='acc-switcher__logout-text'>{localize('Log out')}</span>\n                    <Icon icon='IconLogout' className='acc-switcher__logout-icon drawer__icon' />\n                </div>\n            </div>\n        );\n    }\n}\n\nAccountSwitcher.propTypes = {\n    account_list          : PropTypes.array,\n    account_loginid       : PropTypes.string,\n    cleanUp               : PropTypes.func,\n    clearError            : PropTypes.func,\n    has_error             : PropTypes.bool,\n    is_logged_in          : PropTypes.bool,\n    is_positions_drawer_on: PropTypes.bool,\n    is_upgrade_enabled    : PropTypes.bool,\n    is_virtual            : PropTypes.bool,\n    is_visible            : PropTypes.bool,\n    onClickUpgrade        : PropTypes.func,\n    toggle                : PropTypes.func,\n    togglePositionsDrawer : PropTypes.func,\n    upgrade_info          : PropTypes.object,\n    virtual_loginid       : PropTypes.string,\n};\n\nconst account_switcher = connect(\n    ({ client, ui/* , modules */ }) => ({\n        account_list          : client.account_list,\n        account_loginid       : client.loginid,\n        is_logged_in          : client.is_logged_in,\n        is_virtual            : client.is_virtual,\n        switchAccount         : client.switchAccount,\n        upgrade_info          : client.upgrade_info,\n        cleanUp               : client.cleanUp,\n        virtual_loginid       : client.virtual_account_loginid,\n        // clearError            : modules.contract_trade.clearError,\n        // has_error             : modules.contract_trade.has_error,\n        is_positions_drawer_on: ui.is_positions_drawer_on,\n        togglePositionsDrawer : ui.togglePositionsDrawer,\n    }),\n)(AccountSwitcher);\n\nexport { account_switcher as AccountSwitcher };\n","import classNames          from 'classnames';\nimport PropTypes           from 'prop-types';\nimport React               from 'react';\nimport { CSSTransition }   from 'react-transition-group';\nimport { AccountSwitcher } from 'App/Containers/AccountSwitcher';\nimport Icon                from 'Assets/icon.jsx';\n\n// todo fix absolute path\n\nconst AccountInfo = ({\n    balance,\n    currency,\n    loginid,\n    is_dialog_on,\n    is_upgrade_enabled,\n    is_virtual,\n    onClickUpgrade,\n    toggleDialog,\n}) => (\n    <div className='acc-info__wrapper'>\n        <div\n            id='dt_account_dropdown'\n            className={classNames('acc-info', {\n                'acc-info--show'      : is_dialog_on,\n                'acc-info--is-virtual': is_virtual,\n            })}\n            onClick={toggleDialog}\n        >\n            <p\n                className='acc-info__id'\n                title={loginid}\n            >\n                {loginid}&nbsp;\n            </p>\n            {\n                typeof balance !== 'undefined' &&\n                <p className='acc-info__balance'>\n                    <span\n                        className={classNames('symbols', { [`symbols--${(currency || '').toLowerCase()}`]: currency })}\n                    />\n                    {balance}\n                </p>\n            }\n            <Icon icon='IconArrowBold' className='acc-info__select-arrow' />\n        </div>\n        <CSSTransition\n            in={is_dialog_on}\n            timeout={200}\n            classNames={{\n                enter    : 'acc-switcher__wrapper--enter',\n                enterDone: 'acc-switcher__wrapper--enter-done',\n                exit     : 'acc-switcher__wrapper--exit',\n            }}\n            unmountOnExit\n        >\n            <div className='acc-switcher__wrapper'>\n                <AccountSwitcher\n                    is_visible={is_dialog_on}\n                    toggle={toggleDialog}\n                    is_upgrade_enabled={is_upgrade_enabled}\n                    onClickUpgrade={onClickUpgrade}\n                />\n            </div>\n        </CSSTransition>\n    </div>\n);\n\nAccountInfo.propTypes = {\n    account_type      : PropTypes.string,\n    balance           : PropTypes.string,\n    currency          : PropTypes.string,\n    is_dialog_on      : PropTypes.bool,\n    is_upgrade_enabled: PropTypes.bool,\n    is_virtual        : PropTypes.bool,\n    loginid           : PropTypes.string,\n    onClickUpgrade    : PropTypes.func,\n    toggleDialog      : PropTypes.func,\n};\n\nexport default AccountInfo;\n"],"sourceRoot":""}