{"version":3,"sources":["webpack:///./App/Components/Elements/Label/label.jsx","webpack:///./App/Components/Elements/money.jsx","webpack:///./Modules/Reports/Containers/wallet-information.jsx"],"names":["available_modes","available_sizes","Label","mode","children","size","type","some","m","scale","s","className","classNames","propTypes","PropTypes","oneOfType","arrayOf","node","oneOf","Money","amount","currency","has_sign","is_formatted","sign","abs_value","Math","abs","final_amount","formatMoney","Fragment","toLowerCase","number","string","bool","Description","is_virtual","i18n_default_text","values","toUpperCase","WalletInformation","balance","has_description","has_loginid","is_website_status_ready","loginid","icon","connect","client"],"mappings":"wSAIA,IAAMA,EAAkB,CACpB,UACA,UACA,OACA,SACA,OACA,iBACA,eAGEC,EAAkB,CACpB,UACA,SAGEC,EAAQ,SAAC,GAAyC,MAAvCC,EAAuC,EAAvCA,KAAMC,EAAiC,EAAjCA,SAAiC,IAAvBC,YAAuB,MAAhB,UAAgB,EAC9CC,EAAON,EAAgBO,KAAK,SAAAC,GAAC,OAAIA,IAAML,IAAQA,EAAO,UACtDM,EAAQR,EAAgBM,KAAK,SAAAG,GAAC,OAAIA,IAAML,IAAQA,EAAO,UAE7D,OACI,0BAAMM,UAAWC,IAAW,SAAD,0BACZH,GAAUA,GADE,qBAEZH,GAAUA,GAFE,KAIzBF,IAIVF,EAAMW,UAAY,CACdT,SAAUU,IAAUC,UAAU,CAC1BD,IAAUE,QAAQF,IAAUG,MAC5BH,IAAUG,OAEdd,KAAMW,IAAUI,MAAMlB,IAEXE,Q,gBClCTiB,EAAQ,SAAC,GAMT,IALFC,EAKE,EALFA,OACAT,EAIE,EAJFA,UAIE,IAHFU,gBAGE,MAHS,MAGT,EAFFC,EAEE,EAFFA,SAEE,IADFC,oBACE,SACEC,EAAO,IACNJ,IAAWA,EAAS,GAAKE,KAC1BE,EAAOJ,EAAS,EAAI,IAAM,KAG9B,IAAMK,EAAYC,KAAKC,IAAIP,GACrBQ,EAAeL,EAAeM,sBAAYR,EAAUI,GAAW,GAAQA,EAE7E,OACI,kBAAC,IAAMK,SAAP,KACKR,GAAYE,EACb,0BAAMb,UAAWC,IAAWD,EAAW,UAAZ,mBAAmCU,EAASU,kBACtEH,IAKbT,EAAMN,UAAY,CACdO,OAAQN,IAAUC,UAAU,CACxBD,IAAUkB,OACVlB,IAAUmB,SAEdtB,UAAcG,IAAUmB,OACxBZ,SAAcP,IAAUmB,OACxBX,SAAcR,IAAUoB,KACxBX,aAAcT,IAAUoB,MAGbf,Q,QChCTgB,EAAc,SAAC,GAAD,IAAGd,EAAH,EAAGA,SAAH,SAAae,WAEzB,kBAAC,IAAD,CAAUC,kBAAkB,oBAE5B,kBAAC,IAAD,CAAUA,kBAAkB,sBAAsBC,OAAQ,CAAEjB,SAAUA,EAASkB,kBAIjFC,EAAoB,SAAC,GAQrB,IAPFnB,EAOE,EAPFA,SACAoB,EAME,EANFA,QACAC,EAKE,EALFA,gBACAC,EAIE,EAJFA,YACAP,EAGE,EAHFA,WACAQ,EAEE,EAFFA,wBACAC,EACE,EADFA,QAEA,OACI,yBAAKlC,UAAU,mBACTyB,GAAc,kBAAC,IAAD,CAAMU,KAAK,uBAAuBxC,KAAMe,EAASU,gBAChEK,GAAc,kBAAC,IAAD,CAAMU,KAAK,aAC1B,0BAAMnC,UAAU,eACV+B,EACE,kBAAC,EAAD,CAAarB,SAAUA,EAAUe,WAAYA,IAE7C,0BAAMzB,UAAU,yBAAyBU,EAASkB,gBAGzDI,GAAe,0BAAMhC,UAAU,mBAAmBkC,GAClDD,GACD,kBAAC,EAAD,CAAOzC,KAAI,UAAKiC,EAAa,cAAgB,kBAAoB/B,KAAK,SAClE,kBAAC,EAAD,CAAOe,OAAQqB,EAASpB,SAAUA,MAGpCuB,GAA2B,gCAKzCJ,EAAkB3B,UAAY,CAC1B6B,gBAAiB5B,IAAUoB,KAC3BS,YAAiB7B,IAAUoB,MAGhBa,sBAAQ,gBAAGC,EAAH,EAAGA,OAAH,MAAiB,CACpCP,QAAyBO,EAAOP,QAChCpB,SAAyB2B,EAAO3B,SAChCe,WAAyBY,EAAOZ,WAChCQ,wBAAyBI,EAAOJ,wBAChCC,QAAyBG,EAAOH,UALrBE,CAMXP","file":"js/wallet-information.6a2c8d29c946d0de4cc4.js","sourcesContent":["import classNames from 'classnames';\nimport React      from 'react';\nimport PropTypes  from 'prop-types';\n\nconst available_modes = [\n    'default',\n    'success',\n    'warn',\n    'danger',\n    'info',\n    'success-invert',\n    'warn-invert',\n];\n\nconst available_sizes = [\n    'regular',\n    'large',\n];\n\nconst Label = ({ mode, children, size = 'regular' }) => {\n    const type = available_modes.some(m => m === mode) ? mode : 'default';\n    const scale = available_sizes.some(s => s === size) ? size : 'regular';\n\n    return (\n        <span className={classNames('label', {\n            [`label--${scale}`]: scale,\n            [`label--${type}`] : type,\n        })}\n        >{children}\n        </span>\n    );\n};\nLabel.propTypes = {\n    children: PropTypes.oneOfType([\n        PropTypes.arrayOf(PropTypes.node),\n        PropTypes.node,\n    ]),\n    mode: PropTypes.oneOf(available_modes),\n};\nexport default Label;\n","import classNames      from 'classnames';\nimport PropTypes       from 'prop-types';\nimport React           from 'react';\nimport { formatMoney } from '_common/base/currency_base';\n\nconst Money = ({\n    amount,\n    className,\n    currency = 'USD',\n    has_sign,\n    is_formatted = true,\n}) => {\n    let sign = '';\n    if (+amount && (amount < 0 || has_sign)) {\n        sign = amount > 0 ? '+' : '-';\n    }\n\n    const abs_value = Math.abs(amount);\n    const final_amount = is_formatted ? formatMoney(currency, abs_value, true) : abs_value;\n\n    return (\n        <React.Fragment>\n            {has_sign && sign}\n            <span className={classNames(className, 'symbols', `symbols--${currency.toLowerCase()}`)} />\n            {final_amount}\n        </React.Fragment>\n    );\n};\n\nMoney.propTypes = {\n    amount: PropTypes.oneOfType([\n        PropTypes.number,\n        PropTypes.string,\n    ]),\n    className   : PropTypes.string,\n    currency    : PropTypes.string,\n    has_sign    : PropTypes.bool,\n    is_formatted: PropTypes.bool,\n};\n\nexport default Money;\n","import PropTypes         from 'prop-types';\nimport React             from 'react';\nimport Icon              from 'Assets/icon.jsx';\nimport Label             from 'App/Components/Elements/Label/label.jsx';\nimport Localize          from 'App/Components/Elements/localize.jsx';\nimport Money             from 'App/Components/Elements/money.jsx';\nimport { connect }       from 'Stores/connect';\n\nconst Description = ({ currency, is_virtual }) => (\n    is_virtual ?\n        <Localize i18n_default_text='Practice wallet' />\n        :\n        <Localize i18n_default_text='{{currency}} wallet' values={{ currency: currency.toUpperCase() }} />\n\n);\n\nconst WalletInformation = ({\n    currency,\n    balance,\n    has_description,\n    has_loginid,\n    is_virtual,\n    is_website_status_ready,\n    loginid,\n}) => {\n    return (\n        <div className='account-wallet'>\n            {!is_virtual && <Icon icon='IconAccountsCurrency' type={currency.toLowerCase()} />}\n            {is_virtual && <Icon icon='IconDemo' />}\n            <span className='description'>\n                { has_description ?\n                    <Description currency={currency} is_virtual={is_virtual} />\n                    :\n                    <span className='description__currency'>{currency.toUpperCase()}</span>\n                }\n            </span>\n            {has_loginid && <span className='current-loginid'>{loginid}</span>}\n            {is_website_status_ready &&\n            <Label mode={`${is_virtual ? 'warn-invert' : 'success-invert'}`} size='large'>\n                <Money amount={balance} currency={currency} />\n            </Label>\n            }\n            {!is_website_status_ready && <div />}\n        </div>\n    );\n};\n\nWalletInformation.propTypes = {\n    has_description: PropTypes.bool,\n    has_loginid    : PropTypes.bool,\n};\n\nexport default connect(({ client }) => ({\n    balance                : client.balance,\n    currency               : client.currency,\n    is_virtual             : client.is_virtual,\n    is_website_status_ready: client.is_website_status_ready,\n    loginid                : client.loginid,\n}))(WalletInformation);\n"],"sourceRoot":""}