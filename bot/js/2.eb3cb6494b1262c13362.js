(window["webpackJsonp"] = window["webpackJsonp"] || []).push([[2],{

/***/ "../../components/lib/dropdown.css":
/*!************************************************************************************************!*\
  !*** /Users/mahboobeh/source/deriv-bot-staging/deriv-app/packages/components/lib/dropdown.css ***!
  \************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("// extracted by mini-css-extract-plugin//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi4vLi4vY29tcG9uZW50cy9saWIvZHJvcGRvd24uY3NzLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy9Vc2Vycy9tYWhib29iZWgvc291cmNlL2Rlcml2LWJvdC1zdGFnaW5nL2Rlcml2LWFwcC9wYWNrYWdlcy9jb21wb25lbnRzL2xpYi9kcm9wZG93bi5jc3M/MDE2MSJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBleHRyYWN0ZWQgYnkgbWluaS1jc3MtZXh0cmFjdC1wbHVnaW4iXSwibWFwcGluZ3MiOiJBQUFBIiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///../../components/lib/dropdown.css\n");

/***/ }),

/***/ "../../components/lib/dropdown.js":
/*!***********************************************************************************************!*\
  !*** /Users/mahboobeh/source/deriv-bot-staging/deriv-app/packages/components/lib/dropdown.js ***!
  \***********************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("!function(g,I){ true?module.exports=I(__webpack_require__(/*! prop-types */ \"../../components/node_modules/prop-types/index.js\"),__webpack_require__(/*! react */ \"../../components/node_modules/react/index.js\"),__webpack_require__(/*! classnames */ \"../../components/node_modules/classnames/index.js\"),__webpack_require__(/*! react-transition-group */ \"../../components/node_modules/react-transition-group/esm/index.js\"),__webpack_require__(/*! react-dom */ \"../../components/node_modules/react-dom/index.js\"),__webpack_require__(/*! react-pose */ \"../../components/node_modules/react-pose/dist/react-pose.es.js\"),__webpack_require__(/*! tt-react-custom-scrollbars */ \"../../components/node_modules/tt-react-custom-scrollbars/lib/index.js\")):undefined}(window,(function(__WEBPACK_EXTERNAL_MODULE__0__,__WEBPACK_EXTERNAL_MODULE__1__,__WEBPACK_EXTERNAL_MODULE__2__,__WEBPACK_EXTERNAL_MODULE__3__,__WEBPACK_EXTERNAL_MODULE__6__,__WEBPACK_EXTERNAL_MODULE__8__,__WEBPACK_EXTERNAL_MODULE__12__){return function(g){var I={};function C(e){if(I[e])return I[e].exports;var A=I[e]={i:e,l:!1,exports:{}};return g[e].call(A.exports,A,A.exports,C),A.l=!0,A.exports}return C.m=g,C.c=I,C.d=function(g,I,e){C.o(g,I)||Object.defineProperty(g,I,{enumerable:!0,get:e})},C.r=function(g){\"undefined\"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(g,Symbol.toStringTag,{value:\"Module\"}),Object.defineProperty(g,\"__esModule\",{value:!0})},C.t=function(g,I){if(1&I&&(g=C(g)),8&I)return g;if(4&I&&\"object\"==typeof g&&g&&g.__esModule)return g;var e=Object.create(null);if(C.r(e),Object.defineProperty(e,\"default\",{enumerable:!0,value:g}),2&I&&\"string\"!=typeof g)for(var A in g)C.d(e,A,function(I){return g[I]}.bind(null,A));return e},C.n=function(g){var I=g&&g.__esModule?function(){return g.default}:function(){return g};return C.d(I,\"a\",I),I},C.o=function(g,I){return Object.prototype.hasOwnProperty.call(g,I)},C.p=\"\",C(C.s=39)}([function(module,exports){eval(\"module.exports = __WEBPACK_EXTERNAL_MODULE__0__;//# sourceURL=[module]\\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMC5qcyIsInNvdXJjZXMiOlsid2VicGFjazovL2Rlcml2LWNvbXBvbmVudC5bbmFtZV0vZXh0ZXJuYWwgXCJwcm9wLXR5cGVzXCI/MzgzMiJdLCJzb3VyY2VzQ29udGVudCI6WyJtb2R1bGUuZXhwb3J0cyA9IF9fV0VCUEFDS19FWFRFUk5BTF9NT0RVTEVfXzBfXzsiXSwibWFwcGluZ3MiOiJBQUFBIiwic291cmNlUm9vdCI6IiJ9\\n//# sourceURL=webpack-internal:///0\\n\")},function(module,exports){eval(\"module.exports = __WEBPACK_EXTERNAL_MODULE__1__;//# sourceURL=[module]\\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMS5qcyIsInNvdXJjZXMiOlsid2VicGFjazovL2Rlcml2LWNvbXBvbmVudC5bbmFtZV0vZXh0ZXJuYWwgXCJyZWFjdFwiPzU4OGUiXSwic291cmNlc0NvbnRlbnQiOlsibW9kdWxlLmV4cG9ydHMgPSBfX1dFQlBBQ0tfRVhURVJOQUxfTU9EVUxFX18xX187Il0sIm1hcHBpbmdzIjoiQUFBQSIsInNvdXJjZVJvb3QiOiIifQ==\\n//# sourceURL=webpack-internal:///1\\n\")},function(module,exports){eval(\"module.exports = __WEBPACK_EXTERNAL_MODULE__2__;//# sourceURL=[module]\\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMi5qcyIsInNvdXJjZXMiOlsid2VicGFjazovL2Rlcml2LWNvbXBvbmVudC5bbmFtZV0vZXh0ZXJuYWwgXCJjbGFzc25hbWVzXCI/YWFhYiJdLCJzb3VyY2VzQ29udGVudCI6WyJtb2R1bGUuZXhwb3J0cyA9IF9fV0VCUEFDS19FWFRFUk5BTF9NT0RVTEVfXzJfXzsiXSwibWFwcGluZ3MiOiJBQUFBIiwic291cmNlUm9vdCI6IiJ9\\n//# sourceURL=webpack-internal:///2\\n\")},function(module,exports){eval(\"module.exports = __WEBPACK_EXTERNAL_MODULE__3__;//# sourceURL=[module]\\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMy5qcyIsInNvdXJjZXMiOlsid2VicGFjazovL2Rlcml2LWNvbXBvbmVudC5bbmFtZV0vZXh0ZXJuYWwgXCJyZWFjdC10cmFuc2l0aW9uLWdyb3VwXCI/ZGRlMCJdLCJzb3VyY2VzQ29udGVudCI6WyJtb2R1bGUuZXhwb3J0cyA9IF9fV0VCUEFDS19FWFRFUk5BTF9NT0RVTEVfXzNfXzsiXSwibWFwcGluZ3MiOiJBQUFBIiwic291cmNlUm9vdCI6IiJ9\\n//# sourceURL=webpack-internal:///3\\n\")},,,function(module,exports){eval(\"module.exports = __WEBPACK_EXTERNAL_MODULE__6__;//# sourceURL=[module]\\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNi5qcyIsInNvdXJjZXMiOlsid2VicGFjazovL2Rlcml2LWNvbXBvbmVudC5bbmFtZV0vZXh0ZXJuYWwgXCJyZWFjdC1kb21cIj81ZTlhIl0sInNvdXJjZXNDb250ZW50IjpbIm1vZHVsZS5leHBvcnRzID0gX19XRUJQQUNLX0VYVEVSTkFMX01PRFVMRV9fNl9fOyJdLCJtYXBwaW5ncyI6IkFBQUEiLCJzb3VyY2VSb290IjoiIn0=\\n//# sourceURL=webpack-internal:///6\\n\")},,function(module,exports){eval(\"module.exports = __WEBPACK_EXTERNAL_MODULE__8__;//# sourceURL=[module]\\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiOC5qcyIsInNvdXJjZXMiOlsid2VicGFjazovL2Rlcml2LWNvbXBvbmVudC5bbmFtZV0vZXh0ZXJuYWwgXCJyZWFjdC1wb3NlXCI/OTZiNCJdLCJzb3VyY2VzQ29udGVudCI6WyJtb2R1bGUuZXhwb3J0cyA9IF9fV0VCUEFDS19FWFRFUk5BTF9NT0RVTEVfXzhfXzsiXSwibWFwcGluZ3MiOiJBQUFBIiwic291cmNlUm9vdCI6IiJ9\\n//# sourceURL=webpack-internal:///8\\n\")},,,,function(module,exports){eval(\"module.exports = __WEBPACK_EXTERNAL_MODULE__12__;//# sourceURL=[module]\\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTIuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9kZXJpdi1jb21wb25lbnQuW25hbWVdL2V4dGVybmFsIFwidHQtcmVhY3QtY3VzdG9tLXNjcm9sbGJhcnNcIj8xMTY3Il0sInNvdXJjZXNDb250ZW50IjpbIm1vZHVsZS5leHBvcnRzID0gX19XRUJQQUNLX0VYVEVSTkFMX01PRFVMRV9fMTJfXzsiXSwibWFwcGluZ3MiOiJBQUFBIiwic291cmNlUm9vdCI6IiJ9\\n//# sourceURL=webpack-internal:///12\\n\")},function(module,__webpack_exports__,__webpack_require__){\"use strict\";eval('__webpack_require__.r(__webpack_exports__);\\n\\n// EXTERNAL MODULE: ./src/components/popover/popover.scss\\nvar popover = __webpack_require__(15);\\n\\n// EXTERNAL MODULE: external \"classnames\"\\nvar external_classnames_ = __webpack_require__(2);\\nvar external_classnames_default = /*#__PURE__*/__webpack_require__.n(external_classnames_);\\n\\n// EXTERNAL MODULE: external \"prop-types\"\\nvar external_prop_types_ = __webpack_require__(0);\\nvar external_prop_types_default = /*#__PURE__*/__webpack_require__.n(external_prop_types_);\\n\\n// EXTERNAL MODULE: external \"react\"\\nvar external_react_ = __webpack_require__(1);\\nvar external_react_default = /*#__PURE__*/__webpack_require__.n(external_react_);\\n\\n// EXTERNAL MODULE: external \"react-dom\"\\nvar external_react_dom_ = __webpack_require__(6);\\nvar external_react_dom_default = /*#__PURE__*/__webpack_require__.n(external_react_dom_);\\n\\n// EXTERNAL MODULE: external \"react-pose\"\\nvar external_react_pose_ = __webpack_require__(8);\\nvar external_react_pose_default = /*#__PURE__*/__webpack_require__.n(external_react_pose_);\\n\\n// CONCATENATED MODULE: ./src/components/icon-info-blue.jsx\\n\\n // TODO remove this file entirely when icon component is ready.\\n\\nvar icon_info_blue_IconInfoBlue = function IconInfoBlue(_ref) {\\n  var className = _ref.className;\\n  return external_react_default.a.createElement(\"svg\", {\\n    className: className,\\n    width: \"16\",\\n    height: \"16\",\\n    viewBox: \"0 0 16 16\"\\n  }, external_react_default.a.createElement(\"g\", {\\n    fill: \"none\",\\n    fillRule: \"evenodd\"\\n  }, external_react_default.a.createElement(\"circle\", {\\n    cx: \"8\",\\n    cy: \"8\",\\n    r: \"8\",\\n    fill: \"#2196F3\"\\n  }), external_react_default.a.createElement(\"g\", {\\n    fill: \"#FFF\",\\n    transform: \"translate(6.5 4)\"\\n  }, external_react_default.a.createElement(\"circle\", {\\n    cx: \"1.5\",\\n    cy: \"1\",\\n    r: \"1\"\\n  }), external_react_default.a.createElement(\"rect\", {\\n    width: \"2\",\\n    height: \"5\",\\n    x: \".5\",\\n    y: \"3\",\\n    rx: \"1\"\\n  }))));\\n};\\n\\nicon_info_blue_IconInfoBlue.propTypes = {\\n  className: external_prop_types_default.a.string\\n};\\n/* harmony default export */ var icon_info_blue = (icon_info_blue_IconInfoBlue);\\n// CONCATENATED MODULE: ./src/components/popover/popover-bubble.jsx\\nfunction _typeof(obj) { if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\\n\\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\\n\\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\\n\\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\\n\\nfunction _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) { return call; } return _assertThisInitialized(self); }\\n\\nfunction _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError(\"this hasn\\'t been initialised - super() hasn\\'t been called\"); } return self; }\\n\\nfunction _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }\\n\\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function\"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }\\n\\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\\n\\n\\n\\n\\n\\n\\n\\nvar FadeIn = external_react_pose_default.a.span({\\n  enter: {\\n    opacity: 1,\\n    transition: {\\n      duration: 150\\n    }\\n  },\\n  exit: {\\n    opacity: 0,\\n    transition: {\\n      duration: 150\\n    }\\n  }\\n});\\n\\nvar popover_bubble_PopoverBubble =\\n/*#__PURE__*/\\nfunction (_React$PureComponent) {\\n  _inherits(PopoverBubble, _React$PureComponent);\\n\\n  function PopoverBubble() {\\n    var _getPrototypeOf2;\\n\\n    var _this;\\n\\n    _classCallCheck(this, PopoverBubble);\\n\\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\\n      args[_key] = arguments[_key];\\n    }\\n\\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(PopoverBubble)).call.apply(_getPrototypeOf2, [this].concat(args)));\\n\\n    _this.calculatePosition = function () {\\n      var _this$props = _this.props,\\n          alignment = _this$props.alignment,\\n          target_rectangle = _this$props.target_rectangle,\\n          _this$props$margin = _this$props.margin,\\n          margin = _this$props$margin === void 0 ? 0 : _this$props$margin;\\n\\n      switch (alignment) {\\n        case \\'top\\':\\n          return {\\n            left: target_rectangle.width / 2 + target_rectangle.left,\\n            bottom: window.innerHeight - target_rectangle.top + margin,\\n            transform: \\'translateX(-50%)\\'\\n          };\\n\\n        case \\'bottom\\':\\n          return {\\n            left: target_rectangle.width / 2 + target_rectangle.left,\\n            top: target_rectangle.bottom + margin,\\n            transform: \\'translateX(-50%)\\'\\n          };\\n\\n        case \\'left\\':\\n          return {\\n            right: window.innerWidth - target_rectangle.left + margin,\\n            top: target_rectangle.height / 2 + target_rectangle.top,\\n            transform: \\'translateY(-50%)\\'\\n          };\\n\\n        case \\'right\\':\\n          return {\\n            left: target_rectangle.right + margin,\\n            top: target_rectangle.height / 2 + target_rectangle.top,\\n            transform: \\'translateY(-50%)\\'\\n          };\\n\\n        default:\\n          return {\\n            left: target_rectangle.left,\\n            top: target_rectangle.top\\n          };\\n      }\\n    };\\n\\n    return _this;\\n  }\\n\\n  _createClass(PopoverBubble, [{\\n    key: \"render\",\\n    value: function render() {\\n      var _this$props2 = this.props,\\n          alignment = _this$props2.alignment,\\n          className = _this$props2.className,\\n          has_error = _this$props2.has_error,\\n          icon = _this$props2.icon,\\n          id = _this$props2.id,\\n          is_open = _this$props2.is_open,\\n          message = _this$props2.message,\\n          target_rectangle = _this$props2.target_rectangle,\\n          portal_container = _this$props2.portal_container;\\n      if (!target_rectangle) return null;\\n      var popover_bubble = external_react_default.a.createElement(external_react_pose_[\"PoseGroup\"], null, is_open && external_react_default.a.createElement(FadeIn, {\\n        key: \"fade_in\",\\n        initialPose: \"exit\",\\n        style: {\\n          position: \\'fixed\\',\\n          zIndex: 999\\n        }\\n      }, external_react_default.a.createElement(\"span\", {\\n        style: target_rectangle ? this.calculatePosition() : {},\\n        \"data-popover-pos\": alignment,\\n        className: external_classnames_default()(className, \\'dc-popover__bubble\\', {\\n          \\'dc-popover__bubble--error\\': has_error\\n        }),\\n        id: id\\n      }, icon === \\'info\\' && external_react_default.a.createElement(\"i\", {\\n        className: \"dc-popover__bubble__icon\"\\n      }, external_react_default.a.createElement(icon_info_blue, null)), external_react_default.a.createElement(\"span\", {\\n        className: \"dc-popover__bubble__text\"\\n      }, message), external_react_default.a.createElement(\"span\", {\\n        className: \"dc-popover__bubble__arrow\"\\n      }))));\\n      return external_react_dom_default.a.createPortal(popover_bubble, document.getElementById(portal_container));\\n    }\\n  }]);\\n\\n  return PopoverBubble;\\n}(external_react_default.a.PureComponent);\\n\\npopover_bubble_PopoverBubble.propTypes = {\\n  alignment: external_prop_types_default.a.string,\\n  children: external_prop_types_default.a.node,\\n  className: external_prop_types_default.a.string,\\n  has_error: external_prop_types_default.a.bool,\\n  icon: external_prop_types_default.a.string,\\n  id: external_prop_types_default.a.string,\\n  is_open: external_prop_types_default.a.bool,\\n  margin: external_prop_types_default.a.number,\\n  message: external_prop_types_default.a.string.isRequired,\\n  target_rectangle: external_prop_types_default.a.object\\n};\\n/* harmony default export */ var popover_popover_bubble = (popover_bubble_PopoverBubble);\\n// CONCATENATED MODULE: ./src/components/icon-info-outline.jsx\\n\\n\\n // TODO remove this file entirely when icon component is ready.\\n\\nvar icon_info_outline_IconInfoOutline = function IconInfoOutline(_ref) {\\n  var className = _ref.className,\\n      onMouseEnter = _ref.onMouseEnter,\\n      onMouseLeave = _ref.onMouseLeave;\\n  return external_react_default.a.createElement(\"svg\", {\\n    className: external_classnames_default()(\\'inline-icon\\', className),\\n    height: \"16\",\\n    onMouseEnter: onMouseEnter,\\n    onMouseLeave: onMouseLeave,\\n    viewBox: \"0 0 16 16\",\\n    width: \"16\"\\n  }, external_react_default.a.createElement(\"path\", {\\n    className: \"color1-fill\",\\n    fill: \"rgba(0, 0, 0, 0.16)\",\\n    fillRule: \"evenodd\",\\n    d: \"M8 15A7 7 0 1 0 8 1a7 7 0 0 0 0 14zm0 1A8 8 0 1 1 8 0a8 8 0 0 1 0 16zM8 6a.75.75 0 1 0 0-1.5A.75.75 0 0 0 8 6zm0 1a.5.5 0 0 0-.5.5v4a.5.5 0 1 0 1 0v-4A.5.5 0 0 0 8 7z\"\\n  }));\\n};\\n\\nicon_info_outline_IconInfoOutline.propTypes = {\\n  className: external_prop_types_default.a.string\\n};\\n/* harmony default export */ var icon_info_outline = (icon_info_outline_IconInfoOutline);\\n// CONCATENATED MODULE: ./src/components/icon-question.jsx\\n\\n // TODO remove this file entirely when icon component is ready.\\n\\nvar icon_question_IconQuestion = function IconQuestion(_ref) {\\n  var className = _ref.className;\\n  return external_react_default.a.createElement(\"svg\", {\\n    className: className,\\n    width: \"16\",\\n    height: \"16\",\\n    viewBox: \"0 0 16 16\"\\n  }, external_react_default.a.createElement(\"g\", {\\n    fill: \"#FFF\",\\n    fillRule: \"evenodd\"\\n  }, external_react_default.a.createElement(\"path\", {\\n    d: \"M8 16A8 8 0 1 1 8 0a8 8 0 0 1 0 16zm0-1A7 7 0 1 0 8 1a7 7 0 0 0 0 14z\",\\n    fillRule: \"nonzero\"\\n  }), external_react_default.a.createElement(\"path\", {\\n    d: \"M7.39 9.518c.007-.373.052-.668.134-.885.082-.216.25-.456.503-.72l.646-.636c.276-.298.415-.618.415-.96 0-.33-.09-.588-.272-.774-.18-.187-.444-.28-.789-.28-.335 0-.605.084-.809.254a.842.842 0 0 0-.306.682H6c.007-.508.196-.918.57-1.23.373-.313.859-.469 1.457-.469.622 0 1.106.16 1.453.478.347.318.52.755.52 1.31 0 .55-.266 1.091-.799 1.625l-.538.508c-.24.255-.36.62-.36 1.097h-.912zm-.039 1.492a.5.5 0 0 1 .136-.355c.09-.096.224-.144.402-.144.178 0 .312.048.404.144a.493.493 0 0 1 .139.355.477.477 0 0 1-.139.351c-.092.093-.226.139-.404.139-.178 0-.312-.046-.402-.139a.481.481 0 0 1-.136-.35z\"\\n  })));\\n};\\n\\nicon_question_IconQuestion.propTypes = {\\n  className: external_prop_types_default.a.string\\n};\\n/* harmony default export */ var icon_question = (icon_question_IconQuestion);\\n// CONCATENATED MODULE: ./src/components/icon-red-dot.jsx\\n\\n // TODO remove this file entirely when icon component is ready.\\n\\nvar icon_red_dot_IconRedDot = function IconRedDot(_ref) {\\n  var className = _ref.className;\\n  return external_react_default.a.createElement(\"svg\", {\\n    className: className,\\n    width: \"4\",\\n    height: \"4\"\\n  }, external_react_default.a.createElement(\"circle\", {\\n    cx: \"1163\",\\n    cy: \"626\",\\n    r: \"2\",\\n    transform: \"translate(-1161 -624)\",\\n    fill: \"#E31C4B\",\\n    fillRule: \"nonzero\"\\n  }));\\n};\\n\\nicon_red_dot_IconRedDot.propTypes = {\\n  className: external_prop_types_default.a.string\\n};\\n/* harmony default export */ var icon_red_dot = (icon_red_dot_IconRedDot);\\n// CONCATENATED MODULE: ./src/components/popover/popover.jsx\\nfunction popover_typeof(obj) { if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { popover_typeof = function _typeof(obj) { return typeof obj; }; } else { popover_typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return popover_typeof(obj); }\\n\\nfunction popover_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\\n\\nfunction popover_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\\n\\nfunction popover_createClass(Constructor, protoProps, staticProps) { if (protoProps) popover_defineProperties(Constructor.prototype, protoProps); if (staticProps) popover_defineProperties(Constructor, staticProps); return Constructor; }\\n\\nfunction popover_possibleConstructorReturn(self, call) { if (call && (popover_typeof(call) === \"object\" || typeof call === \"function\")) { return call; } return popover_assertThisInitialized(self); }\\n\\nfunction popover_assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError(\"this hasn\\'t been initialised - super() hasn\\'t been called\"); } return self; }\\n\\nfunction popover_getPrototypeOf(o) { popover_getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return popover_getPrototypeOf(o); }\\n\\nfunction popover_inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function\"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) popover_setPrototypeOf(subClass, superClass); }\\n\\nfunction popover_setPrototypeOf(o, p) { popover_setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return popover_setPrototypeOf(o, p); }\\n\\n\\n\\n\\n\\n\\n\\n\\n\\nvar popover_Popover =\\n/*#__PURE__*/\\nfunction (_React$PureComponent) {\\n  popover_inherits(Popover, _React$PureComponent);\\n\\n  function Popover(props) {\\n    var _this;\\n\\n    popover_classCallCheck(this, Popover);\\n\\n    _this = popover_possibleConstructorReturn(this, popover_getPrototypeOf(Popover).call(this, props));\\n\\n    _this.toggleOpen = function () {\\n      _this.setState({\\n        is_open: Boolean(_this.props.message),\\n        target_rectangle: _this.target_reference.current.getBoundingClientRect()\\n      });\\n    };\\n\\n    _this.toggleClose = function () {\\n      return _this.setState({\\n        is_open: false\\n      });\\n    };\\n\\n    _this.state = {\\n      is_open: false,\\n      target_rectangle: null\\n    };\\n    _this.target_reference = external_react_default.a.createRef();\\n    return _this;\\n  }\\n\\n  popover_createClass(Popover, [{\\n    key: \"componentDidMount\",\\n    value: function componentDidMount() {\\n      this.setState({\\n        is_open: this.props.has_error,\\n        target_rectangle: this.target_reference.current.getBoundingClientRect()\\n      });\\n    }\\n  }, {\\n    key: \"render\",\\n    value: function render() {\\n      var _this$props = this.props,\\n          alignment = _this$props.alignment,\\n          children = _this$props.children,\\n          className = _this$props.className,\\n          classNameBubble = _this$props.classNameBubble,\\n          classNameTarget = _this$props.classNameTarget,\\n          classNameTargetIcon = _this$props.classNameTargetIcon,\\n          disable_target_icon = _this$props.disable_target_icon,\\n          disable_message_icon = _this$props.disable_message_icon,\\n          has_error = _this$props.has_error,\\n          icon = _this$props.icon,\\n          id = _this$props.id,\\n          margin = _this$props.margin,\\n          message = _this$props.message;\\n      var icon_class_name = external_classnames_default()(classNameTargetIcon, icon);\\n      return external_react_default.a.createElement(\"div\", {\\n        className: external_classnames_default()(\\'dc-popover\\', className),\\n        id: id,\\n        onMouseEnter: this.toggleOpen,\\n        onMouseLeave: this.toggleClose\\n      }, external_react_default.a.createElement(\"div\", {\\n        className: external_classnames_default()(classNameTarget, \\'dc-popover__target\\'),\\n        ref: this.target_reference\\n      }, !disable_target_icon && external_react_default.a.createElement(\"i\", {\\n        className: message ? \\'dc-popover__target__icon\\' : \\'dc-popover__target__icon--disabled\\'\\n      }, icon === \\'info\\' && external_react_default.a.createElement(icon_info_outline, {\\n        className: icon_class_name\\n      }), icon === \\'question\\' && external_react_default.a.createElement(icon_question, {\\n        className: icon_class_name\\n      }), icon === \\'dot\\' && external_react_default.a.createElement(icon_red_dot, {\\n        className: icon_class_name\\n      })), children), external_react_default.a.createElement(popover_popover_bubble, {\\n        alignment: alignment,\\n        className: classNameBubble,\\n        has_error: has_error,\\n        icon: !disable_message_icon && icon,\\n        id: \"\".concat(id, \"_bubble\"),\\n        is_open: this.state.is_open,\\n        target_rectangle: this.state.target_rectangle,\\n        margin: margin,\\n        message: message,\\n        portal_container: this.props.portal_container\\n      }));\\n    }\\n  }]);\\n\\n  return Popover;\\n}(external_react_default.a.PureComponent);\\n\\npopover_Popover.defaultProps = {\\n  portal_container: \\'deriv_app\\'\\n};\\npopover_Popover.propTypes = {\\n  alignment: external_prop_types_default.a.string,\\n  children: external_prop_types_default.a.node,\\n  className: external_prop_types_default.a.string,\\n  classNameBubble: external_prop_types_default.a.string,\\n  classNameTarget: external_prop_types_default.a.string,\\n  classNameTargetIcon: external_prop_types_default.a.string,\\n  disable_target_icon: external_prop_types_default.a.bool,\\n  has_error: external_prop_types_default.a.bool,\\n  icon: external_prop_types_default.a.string,\\n  id: external_prop_types_default.a.string,\\n  margin: external_prop_types_default.a.number,\\n  message: external_prop_types_default.a.string,\\n  portal_container: external_prop_types_default.a.string\\n};\\n/* harmony default export */ var popover_popover = (popover_Popover);\\n// CONCATENATED MODULE: ./src/components/popover/index.js\\n/* concated harmony reexport default */__webpack_require__.d(__webpack_exports__, \"default\", function() { return popover_popover; });\\n\\n\\n//# sourceURL=[module]\\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\\n//# sourceURL=webpack-internal:///13\\n')},,function(module,exports,__webpack_require__){eval(\"// extracted by mini-css-extract-plugin\\n    if(false) { var cssReload; }\\n  //# sourceURL=[module]\\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTUuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9kZXJpdi1jb21wb25lbnQuW25hbWVdLy4vc3JjL2NvbXBvbmVudHMvcG9wb3Zlci9wb3BvdmVyLnNjc3M/YjI4YSJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBleHRyYWN0ZWQgYnkgbWluaS1jc3MtZXh0cmFjdC1wbHVnaW5cbiAgICBpZihtb2R1bGUuaG90KSB7XG4gICAgICAvLyAxNTcwMDgzMzQzOTg3XG4gICAgICB2YXIgY3NzUmVsb2FkID0gcmVxdWlyZShcIiEuLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWhvdC1sb2FkZXIvaG90TW9kdWxlUmVwbGFjZW1lbnQuanNcIikobW9kdWxlLmlkLCB7XCJmaWxlTWFwXCI6XCJ7ZmlsZU5hbWV9XCJ9KTtcbiAgICAgIG1vZHVsZS5ob3QuZGlzcG9zZShjc3NSZWxvYWQpO1xuICAgICAgbW9kdWxlLmhvdC5hY2NlcHQodW5kZWZpbmVkLCBjc3NSZWxvYWQpOztcbiAgICB9XG4gICJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQSxnQ0FLQTtBQUNBIiwic291cmNlUm9vdCI6IiJ9\\n//# sourceURL=webpack-internal:///15\\n\")},,,,,,,,,,,,,function(module,exports,__webpack_require__){eval(\"// extracted by mini-css-extract-plugin\\n    if(false) { var cssReload; }\\n  //# sourceURL=[module]\\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMjguanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9kZXJpdi1jb21wb25lbnQuW25hbWVdLy4vc3JjL2NvbXBvbmVudHMvZHJvcGRvd24vZHJvcGRvd24uc2Nzcz82ZDA1Il0sInNvdXJjZXNDb250ZW50IjpbIi8vIGV4dHJhY3RlZCBieSBtaW5pLWNzcy1leHRyYWN0LXBsdWdpblxuICAgIGlmKG1vZHVsZS5ob3QpIHtcbiAgICAgIC8vIDE1NzAwODMzNDI5MDBcbiAgICAgIHZhciBjc3NSZWxvYWQgPSByZXF1aXJlKFwiIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtaG90LWxvYWRlci9ob3RNb2R1bGVSZXBsYWNlbWVudC5qc1wiKShtb2R1bGUuaWQsIHtcImZpbGVNYXBcIjpcIntmaWxlTmFtZX1cIn0pO1xuICAgICAgbW9kdWxlLmhvdC5kaXNwb3NlKGNzc1JlbG9hZCk7XG4gICAgICBtb2R1bGUuaG90LmFjY2VwdCh1bmRlZmluZWQsIGNzc1JlbG9hZCk7O1xuICAgIH1cbiAgIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBLGdDQUtBO0FBQ0EiLCJzb3VyY2VSb290IjoiIn0=\\n//# sourceURL=webpack-internal:///28\\n\")},function(module,exports,__webpack_require__){eval(\"// extracted by mini-css-extract-plugin\\n    if(false) { var cssReload; }\\n  //# sourceURL=[module]\\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMjkuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9kZXJpdi1jb21wb25lbnQuW25hbWVdLy4vc3JjL2NvbXBvbmVudHMvZHJvcGRvd24vbGlzdC5zY3NzP2YzMzEiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gZXh0cmFjdGVkIGJ5IG1pbmktY3NzLWV4dHJhY3QtcGx1Z2luXG4gICAgaWYobW9kdWxlLmhvdCkge1xuICAgICAgLy8gMTU3MDA4MzM0MzQxOVxuICAgICAgdmFyIGNzc1JlbG9hZCA9IHJlcXVpcmUoXCIhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1ob3QtbG9hZGVyL2hvdE1vZHVsZVJlcGxhY2VtZW50LmpzXCIpKG1vZHVsZS5pZCwge1wiZmlsZU1hcFwiOlwie2ZpbGVOYW1lfVwifSk7XG4gICAgICBtb2R1bGUuaG90LmRpc3Bvc2UoY3NzUmVsb2FkKTtcbiAgICAgIG1vZHVsZS5ob3QuYWNjZXB0KHVuZGVmaW5lZCwgY3NzUmVsb2FkKTs7XG4gICAgfVxuICAiXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0EsZ0NBS0E7QUFDQSIsInNvdXJjZVJvb3QiOiIifQ==\\n//# sourceURL=webpack-internal:///29\\n\")},,,,,,,,,,function(module,__webpack_exports__,__webpack_require__){\"use strict\";eval('__webpack_require__.r(__webpack_exports__);\\n\\n// EXTERNAL MODULE: ./src/components/dropdown/dropdown.scss\\nvar dropdown = __webpack_require__(28);\\n\\n// EXTERNAL MODULE: ./src/components/dropdown/list.scss\\nvar dropdown_list = __webpack_require__(29);\\n\\n// EXTERNAL MODULE: external \"classnames\"\\nvar external_classnames_ = __webpack_require__(2);\\nvar external_classnames_default = /*#__PURE__*/__webpack_require__.n(external_classnames_);\\n\\n// EXTERNAL MODULE: external \"prop-types\"\\nvar external_prop_types_ = __webpack_require__(0);\\nvar external_prop_types_default = /*#__PURE__*/__webpack_require__.n(external_prop_types_);\\n\\n// EXTERNAL MODULE: external \"react\"\\nvar external_react_ = __webpack_require__(1);\\nvar external_react_default = /*#__PURE__*/__webpack_require__.n(external_react_);\\n\\n// EXTERNAL MODULE: external \"react-transition-group\"\\nvar external_react_transition_group_ = __webpack_require__(3);\\n\\n// EXTERNAL MODULE: external \"tt-react-custom-scrollbars\"\\nvar external_tt_react_custom_scrollbars_ = __webpack_require__(12);\\n\\n// CONCATENATED MODULE: ./src/components/icon-arrow.jsx\\n\\n\\n // TODO remove this file entirely when icon component is ready.\\n\\nvar icon_arrow_IconArrow = function IconArrow(_ref) {\\n  var className = _ref.className,\\n      classNamePath = _ref.classNamePath;\\n  return external_react_default.a.createElement(\"svg\", {\\n    className: external_classnames_default()(\\'inline-icon\\', className),\\n    width: \"16\",\\n    height: \"16\"\\n  }, external_react_default.a.createElement(\"path\", {\\n    className: external_classnames_default()(classNamePath, \\'color1-fill\\'),\\n    fill: \"rgba(0, 0, 0, 0.8)\",\\n    fillRule: \"nonzero\",\\n    d: \"M13.164 5.13a.5.5 0 1 1 .672.74l-5.5 5a.5.5 0 0 1-.672 0l-5.5-5a.5.5 0 0 1 .672-.74L8 9.824l5.164-4.694z\"\\n  }));\\n};\\n\\nicon_arrow_IconArrow.propTypes = {\\n  className: external_prop_types_default.a.string,\\n  classNamePath: external_prop_types_default.a.string\\n};\\n/* harmony default export */ var icon_arrow = (icon_arrow_IconArrow);\\n// CONCATENATED MODULE: ./src/components/dropdown/dropdown.js\\n\\nvar getDisplayText = function getDisplayText(list, value) {\\n  var findInArray = function findInArray(arr_list) {\\n    return (arr_list.find(function (item) {\\n      return item.value === value;\\n    }) || {}).text;\\n  };\\n\\n  var text = \\'\\';\\n\\n  if (Array.isArray(list)) {\\n    text = findInArray(list);\\n  } else {\\n    Object.keys(list).some(function (key) {\\n      text = findInArray(list[key]);\\n      return text;\\n    });\\n  }\\n\\n  return text;\\n};\\nvar getItemFromValue = function getItemFromValue(list, value) {\\n  var findInArray = function findInArray(arr_list) {\\n    return arr_list.findIndex(function (item) {\\n      return item.value === value;\\n    });\\n  };\\n\\n  var item = {};\\n\\n  if (Array.isArray(list)) {\\n    item = {\\n      number: findInArray(list),\\n      length: list.length\\n    };\\n  } else {\\n    Object.keys(list).some(function (key) {\\n      item = {\\n        number: findInArray(list[key]),\\n        length: list[key].length\\n      };\\n      return item;\\n    });\\n  }\\n\\n  return item;\\n};\\nvar getValueFromIndex = function getValueFromIndex(list, index) {\\n  var findInArray = function findInArray(arr_list) {\\n    return arr_list[index];\\n  };\\n\\n  var result;\\n\\n  if (Array.isArray(list)) {\\n    result = findInArray(list);\\n  } else {\\n    Object.keys(list).some(function (key) {\\n      result = findInArray(list[key]);\\n      return result.value;\\n    });\\n  }\\n\\n  return result.value;\\n};\\nvar getPrevIndex = function getPrevIndex(index, length) {\\n  var prev_index = index - 1 < 0 ? length - 1 : index - 1;\\n  return prev_index;\\n};\\nvar getNextIndex = function getNextIndex(index, length) {\\n  var next_index = index + 1 === length ? 0 : index + 1;\\n  return next_index;\\n};\\nvar dropdown_listPropType = function listPropType() {\\n  return external_prop_types_default.a.oneOfType([external_prop_types_default.a.arrayOf(external_prop_types_default.a.shape({\\n    disabled: external_prop_types_default.a.bool,\\n    has_tooltip: external_prop_types_default.a.bool,\\n    text: external_prop_types_default.a.string,\\n    tooltip: external_prop_types_default.a.string,\\n    value: external_prop_types_default.a.oneOfType([external_prop_types_default.a.string, external_prop_types_default.a.number])\\n  })), external_prop_types_default.a.object]);\\n};\\n// EXTERNAL MODULE: ./src/components/popover/index.js + 6 modules\\nvar popover = __webpack_require__(13);\\n\\n// CONCATENATED MODULE: ./src/components/dropdown/items.jsx\\n\\n\\n\\n\\n\\nvar items_Items = function Items(_ref) {\\n  var className = _ref.className,\\n      index = _ref.index,\\n      handleSelect = _ref.handleSelect,\\n      has_symbol = _ref.has_symbol,\\n      items = _ref.items,\\n      name = _ref.name,\\n      is_align_text_left = _ref.is_align_text_left,\\n      value = _ref.value;\\n  return items.map(function (item, idx) {\\n    var symbol_type_class_name = item.text && typeof item.text === \\'string\\' ? \"symbols--\".concat(item.text.toLowerCase()) : null;\\n    return external_react_default.a.createElement(\"div\", {\\n      className: external_classnames_default()(\\'dc-list__item\\', {\\n        \\'dc-list__item--highlighted\\': idx === index\\n      }, {\\n        \\'dc-list__item--selected\\': value === item.value\\n      }, {\\n        \\'dc-list__item--disabled\\': item.disabled\\n      }),\\n      name: name,\\n      value: item.value,\\n      onClick: item.disabled ? null : handleSelect.bind(null, item),\\n      key: idx\\n    }, !!has_symbol && item.has_tooltip && external_react_default.a.createElement(popover[\"default\"], {\\n      alignment: \"left\",\\n      message: item.text\\n    }, external_react_default.a.createElement(\"span\", {\\n      className: external_classnames_default()(\\'symbols\\', \\'dc-list__item-symbol\\', symbol_type_class_name)\\n    })), !!has_symbol && !item.has_tooltip && external_react_default.a.createElement(\"span\", {\\n      className: external_classnames_default()(\\'symbols\\', \\'dc-list__item-text\\', symbol_type_class_name)\\n    }), !has_symbol && external_react_default.a.createElement(\"span\", {\\n      className: external_classnames_default()(\\'dc-list__item-text\\', {\\n        \\'dc-list__item-text--left\\': is_align_text_left\\n      }, className)\\n    }, item.text));\\n  });\\n};\\n\\nitems_Items.propTypes = {\\n  className: external_prop_types_default.a.string,\\n  handleSelect: external_prop_types_default.a.func,\\n  has_symbol: external_prop_types_default.a.bool,\\n  name: external_prop_types_default.a.string,\\n  value: external_prop_types_default.a.oneOfType([external_prop_types_default.a.number, external_prop_types_default.a.string])\\n};\\n/* harmony default export */ var dropdown_items = (items_Items);\\n// CONCATENATED MODULE: ./src/components/dropdown/native-select.jsx\\n\\n\\n\\nvar native_select_NativeSelect = function NativeSelect(_ref) {\\n  var name = _ref.name,\\n      list = _ref.list,\\n      value = _ref.value,\\n      onChange = _ref.onChange;\\n  return external_react_default.a.createElement(\"div\", {\\n    className: \"native-select native-select__wrapper\"\\n  }, external_react_default.a.createElement(\"select\", {\\n    className: \"select native-select__select\",\\n    name: name,\\n    value: value,\\n    onChange: onChange\\n  }, Array.isArray(list) ? list.map(function (item, idx) {\\n    return external_react_default.a.createElement(\"option\", {\\n      key: idx,\\n      value: item.value\\n    }, item.text);\\n  }) : Object.keys(list).map(function (key) {\\n    return external_react_default.a.createElement(external_react_default.a.Fragment, {\\n      key: key\\n    }, external_react_default.a.createElement(\"optgroup\", {\\n      label: key\\n    }, list[key].map(function (item, idx) {\\n      return external_react_default.a.createElement(\"option\", {\\n        key: idx,\\n        value: item.value\\n      }, item.text);\\n    })));\\n  })));\\n};\\n\\nnative_select_NativeSelect.propTypes = {\\n  list: external_prop_types_default.a.oneOfType([external_prop_types_default.a.object, external_prop_types_default.a.array]),\\n  name: external_prop_types_default.a.string,\\n  onChange: external_prop_types_default.a.func,\\n  value: external_prop_types_default.a.oneOfType([external_prop_types_default.a.number, external_prop_types_default.a.string])\\n};\\n/* harmony default export */ var native_select = (native_select_NativeSelect);\\n// CONCATENATED MODULE: ./src/components/dropdown/display-text.jsx\\n\\n\\n\\n\\n\\nvar display_text_DisplayText = function DisplayText(_ref) {\\n  var className = _ref.className,\\n      has_symbol = _ref.has_symbol,\\n      list = _ref.list,\\n      is_align_text_left = _ref.is_align_text_left,\\n      placeholder = _ref.placeholder,\\n      name = _ref.name,\\n      value = _ref.value;\\n  var symbol_value_class = has_symbol ? \"symbols--\".concat(value.toLowerCase()) : null;\\n  return external_react_default.a.createElement(external_react_default.a.Fragment, null, has_symbol ? external_react_default.a.createElement(\"span\", {\\n    className: external_classnames_default()(\\'symbols dc-dropdown__display-symbol\\', symbol_value_class, className),\\n    name: name,\\n    value: value\\n  }) : external_react_default.a.createElement(\"span\", {\\n    className: external_classnames_default()(\\'dc-dropdown__display-text\\', className),\\n    name: name,\\n    value: value\\n  }, getDisplayText(list, value)), placeholder && external_react_default.a.createElement(\"div\", {\\n    className: external_classnames_default()(\\'dc-dropdown__display-placeholder\\', {\\n      \\'dc-dropdown__display-placeholder--is-title\\': value,\\n      \\'dc-dropdown__display-placeholder--is-left-text\\': is_align_text_left\\n    })\\n  }, external_react_default.a.createElement(\"span\", {\\n    className: \"dc-dropdown__display-placeholder-text\"\\n  }, placeholder)));\\n};\\n\\ndisplay_text_DisplayText.propTypes = {\\n  className: external_prop_types_default.a.string,\\n  has_symbol: external_prop_types_default.a.bool,\\n  is_title: external_prop_types_default.a.bool,\\n  list: dropdown_listPropType(),\\n  name: external_prop_types_default.a.string,\\n  placeholder: external_prop_types_default.a.string,\\n  value: external_prop_types_default.a.oneOfType([external_prop_types_default.a.string, external_prop_types_default.a.number])\\n};\\n/* harmony default export */ var display_text = (display_text_DisplayText);\\n// CONCATENATED MODULE: ./src/components/dropdown/dropdown.jsx\\nfunction _typeof(obj) { if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\\n\\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\\n\\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\\n\\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\\n\\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\\n\\nfunction _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) { return call; } return _assertThisInitialized(self); }\\n\\nfunction _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError(\"this hasn\\'t been initialised - super() hasn\\'t been called\"); } return self; }\\n\\nfunction _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }\\n\\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function\"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }\\n\\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\nvar dropdown_Dropdown =\\n/*#__PURE__*/\\nfunction (_React$PureComponent) {\\n  _inherits(Dropdown, _React$PureComponent);\\n\\n  function Dropdown() {\\n    var _getPrototypeOf2;\\n\\n    var _this;\\n\\n    _classCallCheck(this, Dropdown);\\n\\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\\n      args[_key] = arguments[_key];\\n    }\\n\\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(Dropdown)).call.apply(_getPrototypeOf2, [this].concat(args)));\\n    _this.list_ref = external_react_default.a.createRef();\\n    _this.state = {\\n      curr_index: getItemFromValue(_this.props.list, _this.props.value).number,\\n      is_list_visible: false,\\n      list_height: 0,\\n      list_width: 0\\n    };\\n\\n    _this.handleSelect = function (item) {\\n      if (item.value !== _this.props.value) {\\n        _this.props.onChange({\\n          target: {\\n            name: _this.props.name,\\n            value: item.value\\n          }\\n        });\\n      }\\n\\n      _this.handleVisibility();\\n    };\\n\\n    _this.setWrapperRef = function (node) {\\n      return _this.wrapper_ref = node;\\n    };\\n\\n    _this.handleClickOutside = function (event) {\\n      if (_this.wrapper_ref && !_this.wrapper_ref.contains(event.target) && _this.state.is_list_visible) {\\n        if (typeof _this.props.handleBlur === \\'function\\') {\\n          _this.props.handleBlur({\\n            target: {\\n              name: _this.props.name\\n            }\\n          });\\n        }\\n\\n        _this.setState({\\n          is_list_visible: false\\n        });\\n      }\\n    };\\n\\n    _this.handleVisibility = function () {\\n      _this.setState(function (state) {\\n        return {\\n          is_list_visible: !state.is_list_visible\\n        };\\n      });\\n    };\\n\\n    _this.handleToggle = function (value) {\\n      if (_this.state.is_list_visible && _this.props.value !== value) {\\n        _this.props.onChange({\\n          target: {\\n            name: _this.props.name,\\n            value: value\\n          }\\n        });\\n      }\\n\\n      _this.handleVisibility();\\n    };\\n\\n    _this.onKeyPressed = function (event) {\\n      if (_this.is_single_option) return;\\n\\n      if (event.keyCode === 9) {\\n        // Tab is pressed\\n        if (_this.state.is_list_visible) {\\n          _this.handleVisibility();\\n        }\\n\\n        return;\\n      }\\n\\n      event.preventDefault();\\n      var index = _this.props.value ? getItemFromValue(_this.props.list, _this.props.value) : 0;\\n      var value = _this.props.value ? getValueFromIndex(_this.props.list, _this.state.curr_index) : null;\\n\\n      switch (event.keyCode) {\\n        case 13: // Enter is pressed\\n\\n        case 32:\\n          // Space is pressed\\n          if (value) _this.handleToggle(value);\\n          break;\\n\\n        case 38:\\n          // Up Arrow is pressed\\n          if (_this.state.is_list_visible) {\\n            var prev_index = getPrevIndex(_this.state.curr_index, index.length);\\n\\n            _this.setState({\\n              curr_index: prev_index\\n            });\\n          }\\n\\n          break;\\n\\n        case 40:\\n          // Down Arrow is pressed\\n          if (_this.state.is_list_visible) {\\n            var next_index = getNextIndex(_this.state.curr_index, index.length);\\n\\n            _this.setState({\\n              curr_index: next_index\\n            });\\n          } else if (!_this.props.is_alignment_left) {\\n            _this.handleVisibility();\\n          }\\n\\n          break;\\n\\n        case 37:\\n          // Left arrow is pressed\\n          if (!_this.state.is_list_visible && _this.props.is_alignment_left) {\\n            _this.handleVisibility();\\n          }\\n\\n          break;\\n\\n        case 39:\\n          // Right Arrow is pressed\\n          if (_this.state.is_list_visible && _this.props.is_alignment_left) {\\n            _this.handleVisibility();\\n          }\\n\\n          break;\\n\\n        default:\\n      } // For char presses, we do a search for the item:\\n\\n\\n      if (event.key.length === 1 && _this.props.list.length) {\\n        var _char = event.key.toLowerCase();\\n\\n        var firstChars = _this.props.list.map(function (x) {\\n          return typeof x === \\'string\\' && x.text[0].toLowerCase();\\n        });\\n\\n        var idx; // Tapping the same character again jumps to the next match:\\n\\n        if (_this.state.curr_index) {\\n          idx = firstChars.indexOf(_char, _this.state.curr_index + 1);\\n        }\\n\\n        if (idx === undefined || idx === -1) {\\n          idx = firstChars.indexOf(_char);\\n        }\\n\\n        if (idx >= 0) {\\n          _this.setState({\\n            curr_index: idx\\n          });\\n        }\\n      }\\n    };\\n\\n    _this.setListDimension = function () {\\n      return _this.setState({\\n        list_width: _this.list_ref.current.offsetWidth,\\n        list_height: _this.list_ref.current.offsetHeight\\n      });\\n    };\\n\\n    return _this;\\n  }\\n\\n  _createClass(Dropdown, [{\\n    key: \"componentDidMount\",\\n    value: function componentDidMount() {\\n      document.addEventListener(\\'mousedown\\', this.handleClickOutside, {\\n        passive: true\\n      });\\n    }\\n  }, {\\n    key: \"componentWillUnmount\",\\n    value: function componentWillUnmount() {\\n      document.removeEventListener(\\'mousedown\\', this.handleClickOutside);\\n    }\\n  }, {\\n    key: \"render\",\\n    value: function render() {\\n      var _this2 = this;\\n\\n      if (this.props.is_nativepicker) {\\n        return external_react_default.a.createElement(native_select, {\\n          name: this.props.name,\\n          value: this.props.value,\\n          list: this.props.list,\\n          onChange: this.props.onChange\\n        });\\n      }\\n\\n      var getDropDownAlignment = function getDropDownAlignment() {\\n        if (_this2.props.is_alignment_left) return _this2.computed_offset_left;else if (_this2.props.is_alignment_top) return _this2.computed_offset_top;\\n        return null;\\n      };\\n\\n      return external_react_default.a.createElement(external_react_default.a.Fragment, null, external_react_default.a.createElement(\"input\", {\\n        className: \"dc-dropdown__inner\",\\n        autoComplete: \"off\",\\n        name: this.props.name,\\n        readOnly: \"readonly\",\\n        type: \"hidden\",\\n        value: this.props.value || 0\\n      }), external_react_default.a.createElement(\"div\", {\\n        ref: this.setWrapperRef,\\n        className: this.container_class_name\\n      }, this.props.label && external_react_default.a.createElement(\"span\", {\\n        className: external_classnames_default()(\\'dc-dropdown__label\\', {\\n          \\'dc-dropdown__label--clicked\\': this.state.is_list_visible\\n        })\\n      }, this.props.label), external_react_default.a.createElement(\"div\", {\\n        className: this.dropdown_display_class_name,\\n        tabIndex: this.is_single_option ? \\'-1\\' : \\'0\\',\\n        onClick: this.handleVisibility,\\n        onKeyDown: this.onKeyPressed\\n      }, external_react_default.a.createElement(display_text, {\\n        has_symbol: this.props.has_symbol,\\n        name: this.props.name,\\n        is_title: this.state.is_list_visible,\\n        placeholder: this.props.placeholder,\\n        value: this.props.value || 0,\\n        list: this.props.list,\\n        is_align_text_left: this.props.is_align_text_left\\n      })), !this.is_single_option && external_react_default.a.createElement(icon_arrow, {\\n        icon: \"IconArrow\",\\n        className: external_classnames_default()(\\'dc-dropdown__select-arrow\\', {\\n          \\'dc-dropdown__select-arrow--left\\': this.props.is_alignment_left\\n        })\\n      }), this.props.error && external_react_default.a.createElement(\"p\", {\\n        className: \"dc-field-error\"\\n      }, this.props.error), external_react_default.a.createElement(external_react_transition_group_[\"CSSTransition\"], {\\n        \"in\": this.state.is_list_visible,\\n        timeout: 100,\\n        classNames: this.transition_class_names,\\n        onEntered: this.setListDimension,\\n        unmountOnExit: true\\n      }, external_react_default.a.createElement(\"div\", {\\n        className: this.dropdown_list_class_names\\n      }, external_react_default.a.createElement(\"div\", {\\n        className: this.list_class_names,\\n        ref: this.list_ref,\\n        style: getDropDownAlignment()\\n      }, external_react_default.a.createElement(external_tt_react_custom_scrollbars_[\"Scrollbars\"], {\\n        autoHeight: true,\\n        autoHide: true,\\n        autoHeightMax: 200,\\n        renderTrackHorizontal: function renderTrackHorizontal(props) {\\n          return external_react_default.a.createElement(\"div\", _extends({}, props, {\\n            className: \"track-horizontal\",\\n            style: {\\n              display: \\'none\\'\\n            }\\n          }));\\n        },\\n        renderThumbHorizontal: function renderThumbHorizontal(props) {\\n          return external_react_default.a.createElement(\"div\", _extends({}, props, {\\n            className: \"thumb-horizontal\",\\n            style: {\\n              display: \\'none\\'\\n            }\\n          }));\\n        }\\n      }, Array.isArray(this.props.list) ? external_react_default.a.createElement(dropdown_items, {\\n        className: this.props.classNameItems,\\n        index: this.state.curr_index,\\n        handleSelect: this.handleSelect,\\n        has_symbol: this.props.has_symbol,\\n        items: this.props.list,\\n        name: this.props.name,\\n        is_align_text_left: this.props.is_align_text_left,\\n        value: this.props.value\\n      }) : Object.keys(this.props.list).map(function (key, idx) {\\n        return external_react_default.a.createElement(external_react_default.a.Fragment, {\\n          key: key\\n        }, external_react_default.a.createElement(\"div\", {\\n          className: external_classnames_default()(\\'dc-list__label\\', _this2.props.classNameLabel)\\n        }, key), external_react_default.a.createElement(dropdown_items, {\\n          className: _this2.props.classNameItems,\\n          handleSelect: _this2.handleSelect,\\n          has_symbol: _this2.props.has_symbol,\\n          items: _this2.props.list[key],\\n          name: _this2.props.name,\\n          is_align_text_left: _this2.props.is_align_text_left,\\n          value: _this2.props.value\\n        }), idx !== Object.keys(_this2.props.list).length - 1 && external_react_default.a.createElement(\"span\", {\\n          className: \"dc-list__separator\"\\n        }));\\n      })))))));\\n    }\\n  }, {\\n    key: \"computed_offset_left\",\\n\\n    /**\\n     * Calculate the offset for the dropdown list based on its width\\n     *\\n     * @return {{transform: string}}\\n     */\\n    get: function get() {\\n      return {\\n        transform: \"translate3d(calc(-\".concat(this.state.list_width, \"px - 12px), 0, 0px)\")\\n      };\\n    }\\n    /**\\n     * Calculate the offset for the dropdown list based on its height\\n     *\\n     * @return {{transform: string}}\\n     */\\n\\n  }, {\\n    key: \"computed_offset_top\",\\n    get: function get() {\\n      return {\\n        transform: \"translate3d(0, calc(-\".concat(this.state.list_height, \"px - 16px), 0px)\")\\n      };\\n    }\\n  }, {\\n    key: \"is_single_option\",\\n    get: function get() {\\n      return Array.isArray(this.props.list) ? this.props.list.length < 2 : // object has less than two props or inner object has less than two props\\n      Object.keys(this.props.list).length && Object.keys(this.props.list).length < 2 && this.props.list[Object.keys(this.props.list)[0]].length < 2;\\n    }\\n  }, {\\n    key: \"container_class_name\",\\n    get: function get() {\\n      return external_classnames_default()(\\'dc-dropdown-container\\', this.props.className, {\\n        \\'dc-dropdown--has-placeholder\\': this.props.placeholder,\\n        \\'dc-dropdown--left\\': this.props.is_alignment_left,\\n        \\'dc-dropdown--show\\': this.state.is_list_visible,\\n        \\'dc-dropdown--disabled\\': this.is_single_option\\n      });\\n    }\\n  }, {\\n    key: \"dropdown_display_class_name\",\\n    get: function get() {\\n      return external_classnames_default()(\\'dc-dropdown__display\\', this.props.classNameDisplay, {\\n        \\'dc-dropdown__display--clicked\\': this.state.is_list_visible,\\n        \\'dc-dropdown__display--has-symbol\\': this.props.has_symbol,\\n        \\'dc-dropdown__display--no-border\\': this.props.no_border,\\n        \\'dc-dropdown__display--is-left-text\\': this.props.is_align_text_left\\n      });\\n    }\\n  }, {\\n    key: \"dropdown_list_class_names\",\\n    get: function get() {\\n      return external_classnames_default()(\\'dc-dropdown__list\\', {\\n        \\'dc-dropdown__list--left\\': this.props.is_alignment_left,\\n        \\'dc-dropdown__list--top\\': this.props.is_alignment_top\\n      });\\n    }\\n  }, {\\n    key: \"list_class_names\",\\n    get: function get() {\\n      return external_classnames_default()(\\'dc-list\\', {\\n        \\'dc-list--left\\': this.props.is_alignment_left\\n      });\\n    }\\n  }, {\\n    key: \"transition_class_names\",\\n    get: function get() {\\n      return {\\n        enter: \"dc-dropdown__list--enter\".concat(this.props.is_alignment_left ? \\' dc-dropdown__list--left--enter\\' : \\'\\'),\\n        enterDone: \"dc-dropdown__list--enter-done\".concat(this.props.is_alignment_left ? \\' dc-dropdown__list--left--enter-done\\' : \\'\\'),\\n        exit: \"dc-dropdown__list--exit\".concat(this.props.is_alignment_left ? \\' dc-dropdown__list--left--exit\\' : \\'\\')\\n      };\\n    }\\n  }]);\\n\\n  return Dropdown;\\n}(external_react_default.a.PureComponent);\\n\\ndropdown_Dropdown.propTypes = {\\n  className: external_prop_types_default.a.string,\\n  classNameDisplay: external_prop_types_default.a.string,\\n  classNameItems: external_prop_types_default.a.string,\\n  classNameLabel: external_prop_types_default.a.string,\\n  has_symbol: external_prop_types_default.a.bool,\\n  is_alignment_left: external_prop_types_default.a.bool,\\n  is_nativepicker: external_prop_types_default.a.bool,\\n  label: external_prop_types_default.a.string,\\n  list: dropdown_listPropType(),\\n  name: external_prop_types_default.a.string,\\n  no_border: external_prop_types_default.a.bool,\\n  onChange: external_prop_types_default.a.func,\\n  placeholder: external_prop_types_default.a.string,\\n  value: external_prop_types_default.a.oneOfType([external_prop_types_default.a.number, external_prop_types_default.a.string])\\n};\\n/* harmony default export */ var dropdown_dropdown = (dropdown_Dropdown);\\n// CONCATENATED MODULE: ./src/components/dropdown/index.js\\n/* concated harmony reexport default */__webpack_require__.d(__webpack_exports__, \"default\", function() { return dropdown_dropdown; });\\n\\n\\n\\n//# sourceURL=[module]\\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\\n//# sourceURL=webpack-internal:///39\\n')}]).default}));//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///../../components/lib/dropdown.js\n");

/***/ }),

/***/ "./App/Containers/CashierModal/error.jsx":
/*!***********************************************!*\
  !*** ./App/Containers/CashierModal/error.jsx ***!
  \***********************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var prop_types__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! prop-types */ \"../node_modules/prop-types/index.js\");\n/* harmony import */ var prop_types__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(prop_types__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react */ \"../node_modules/react/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var deriv_components_lib_button__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! deriv-components/lib/button */ \"../../components/lib/button.js\");\n/* harmony import */ var deriv_components_lib_button__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(deriv_components_lib_button__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var _common_url__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! _common/url */ \"./_common/url.js\");\n/* harmony import */ var _common_url__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(_common_url__WEBPACK_IMPORTED_MODULE_3__);\n/* harmony import */ var Assets_icon_jsx__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! Assets/icon.jsx */ \"./Assets/icon.jsx\");\n/* harmony import */ var Stores_connect__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! Stores/connect */ \"./Stores/connect.js\");\nfunction _typeof(obj) { if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nfunction _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) { return call; } return _assertThisInitialized(self); }\n\nfunction _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return self; }\n\nfunction _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function\"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }\n\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\n\n\n\n\n\n\n\n\nvar Error =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(Error, _React$Component);\n\n  function Error() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, Error);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(Error)).call.apply(_getPrototypeOf2, [this].concat(args)));\n\n    _this.onClickButton = function () {\n      if (_this.props.error.link) {\n        window.open(Object(_common_url__WEBPACK_IMPORTED_MODULE_3__[\"urlFor\"])(_this.props.error.link, undefined, undefined, true));\n      } else if (typeof _this.props.error.onClickButton === 'function') {\n        _this.props.error.onClickButton();\n      }\n\n      _this.props.setErrorMessage('');\n    };\n\n    return _this;\n  }\n\n  _createClass(Error, [{\n    key: \"render\",\n    value: function render() {\n      return react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement(\"div\", {\n        className: \"cashier__wrapper\"\n      }, react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement(Assets_icon_jsx__WEBPACK_IMPORTED_MODULE_4__[\"default\"], {\n        icon: \"IconCashierError\",\n        className: \"cashier-error__icon\"\n      }), Array.isArray(this.props.error.message) ? this.props.error.message.map(function (message, idx) {\n        return react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement(\"p\", {\n          className: \"cashier-error__text\",\n          key: idx\n        }, message);\n      }) : react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement(\"p\", {\n        className: \"cashier-error__text\"\n      }, this.props.error.message), this.props.error.button_text && react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement(deriv_components_lib_button__WEBPACK_IMPORTED_MODULE_2___default.a, {\n        className: \"btn--secondary--default cashier-error__button\",\n        has_effect: true,\n        text: this.props.error.button_text,\n        onClick: this.onClickButton\n      }));\n    }\n  }]);\n\n  return Error;\n}(react__WEBPACK_IMPORTED_MODULE_1___default.a.Component);\n\nError.propTypes = {\n  error: prop_types__WEBPACK_IMPORTED_MODULE_0___default.a.object,\n  setErrorMessage: prop_types__WEBPACK_IMPORTED_MODULE_0___default.a.func\n};\n/* harmony default export */ __webpack_exports__[\"default\"] = (Object(Stores_connect__WEBPACK_IMPORTED_MODULE_5__[\"connect\"])(function (_ref) {\n  var modules = _ref.modules;\n  return {\n    setErrorMessage: modules.cashier.setErrorMessage\n  };\n})(Error));//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9BcHAvQ29udGFpbmVycy9DYXNoaWVyTW9kYWwvZXJyb3IuanN4LmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vQXBwL0NvbnRhaW5lcnMvQ2FzaGllck1vZGFsL2Vycm9yLmpzeD9hYTU3Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBQcm9wVHlwZXMgICAgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgUmVhY3QgICAgICAgIGZyb20gJ3JlYWN0JztcbmltcG9ydCBCdXR0b24gICAgICAgZnJvbSAnZGVyaXYtY29tcG9uZW50cy9saWIvYnV0dG9uJztcbmltcG9ydCB7IHVybEZvciB9ICAgZnJvbSAnX2NvbW1vbi91cmwnO1xuaW1wb3J0IEljb24gICAgICAgICBmcm9tICdBc3NldHMvaWNvbi5qc3gnO1xuaW1wb3J0IHsgY29ubmVjdCB9ICBmcm9tICdTdG9yZXMvY29ubmVjdCc7XG5cbmNsYXNzIEVycm9yIGV4dGVuZHMgUmVhY3QuQ29tcG9uZW50IHtcbiAgICBvbkNsaWNrQnV0dG9uID0gKCkgPT4ge1xuICAgICAgICBpZiAodGhpcy5wcm9wcy5lcnJvci5saW5rKSB7XG4gICAgICAgICAgICB3aW5kb3cub3Blbih1cmxGb3IodGhpcy5wcm9wcy5lcnJvci5saW5rLCB1bmRlZmluZWQsIHVuZGVmaW5lZCwgdHJ1ZSkpO1xuICAgICAgICB9IGVsc2UgaWYgKHR5cGVvZiB0aGlzLnByb3BzLmVycm9yLm9uQ2xpY2tCdXR0b24gPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgIHRoaXMucHJvcHMuZXJyb3Iub25DbGlja0J1dHRvbigpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMucHJvcHMuc2V0RXJyb3JNZXNzYWdlKCcnKTtcbiAgICB9O1xuXG4gICAgcmVuZGVyKCkge1xuICAgICAgICByZXR1cm4gKFxuICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9J2Nhc2hpZXJfX3dyYXBwZXInPlxuICAgICAgICAgICAgICAgIDxJY29uIGljb249J0ljb25DYXNoaWVyRXJyb3InIGNsYXNzTmFtZT0nY2FzaGllci1lcnJvcl9faWNvbicgLz5cbiAgICAgICAgICAgICAgICB7QXJyYXkuaXNBcnJheSh0aGlzLnByb3BzLmVycm9yLm1lc3NhZ2UpID9cbiAgICAgICAgICAgICAgICAgICAgdGhpcy5wcm9wcy5lcnJvci5tZXNzYWdlLm1hcCgobWVzc2FnZSwgaWR4KSA9PlxuICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3NOYW1lPSdjYXNoaWVyLWVycm9yX190ZXh0JyBrZXk9e2lkeH0+e21lc3NhZ2V9PC9wPlxuICAgICAgICAgICAgICAgICAgICApXG4gICAgICAgICAgICAgICAgICAgIDpcbiAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3NOYW1lPSdjYXNoaWVyLWVycm9yX190ZXh0Jz57dGhpcy5wcm9wcy5lcnJvci5tZXNzYWdlfTwvcD5cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAge3RoaXMucHJvcHMuZXJyb3IuYnV0dG9uX3RleHQgJiZcbiAgICAgICAgICAgICAgICA8QnV0dG9uXG4gICAgICAgICAgICAgICAgICAgIGNsYXNzTmFtZT0nYnRuLS1zZWNvbmRhcnktLWRlZmF1bHQgY2FzaGllci1lcnJvcl9fYnV0dG9uJ1xuICAgICAgICAgICAgICAgICAgICBoYXNfZWZmZWN0XG4gICAgICAgICAgICAgICAgICAgIHRleHQ9e3RoaXMucHJvcHMuZXJyb3IuYnV0dG9uX3RleHR9XG4gICAgICAgICAgICAgICAgICAgIG9uQ2xpY2s9e3RoaXMub25DbGlja0J1dHRvbn1cbiAgICAgICAgICAgICAgICAvPlxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICApO1xuICAgIH1cbn1cblxuRXJyb3IucHJvcFR5cGVzID0ge1xuICAgIGVycm9yICAgICAgICAgIDogUHJvcFR5cGVzLm9iamVjdCxcbiAgICBzZXRFcnJvck1lc3NhZ2U6IFByb3BUeXBlcy5mdW5jLFxufTtcblxuZXhwb3J0IGRlZmF1bHQgY29ubmVjdChcbiAgICAoeyBtb2R1bGVzIH0pID0+ICh7XG4gICAgICAgIHNldEVycm9yTWVzc2FnZTogbW9kdWxlcy5jYXNoaWVyLnNldEVycm9yTWVzc2FnZSxcbiAgICB9KVxuKShFcnJvcik7XG4iXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFBQTtBQUNBO0FBQ0E7Ozs7OztBQUNBO0FBQ0E7QUFDQTtBQUFBO0FBQ0E7QUFBQTtBQUFBO0FBRUE7QUFDQTtBQUFBO0FBQUE7QUFEQTtBQUlBO0FBQUE7QUFJQTtBQUNBO0FBQ0E7QUFDQTtBQUpBO0FBU0E7Ozs7QUEvQkE7QUFDQTtBQWlDQTtBQUNBO0FBQ0E7QUFGQTtBQUtBO0FBQ0E7QUFBQTtBQUNBO0FBREE7QUFBQSIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./App/Containers/CashierModal/error.jsx\n");

/***/ }),

/***/ "./templates/_common/components/loading.jsx":
/*!**************************************************!*\
  !*** ./templates/_common/components/loading.jsx ***!
  \**************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var classnames__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! classnames */ \"../node_modules/classnames/index.js\");\n/* harmony import */ var classnames__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(classnames__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react */ \"../node_modules/react/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_1__);\n\n\n\nvar Loading = function Loading(_ref) {\n  var className = _ref.className,\n      is_invisible = _ref.is_invisible,\n      theme = _ref.theme,\n      id = _ref.id;\n  return react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement(\"div\", {\n    id: id,\n    className: classnames__WEBPACK_IMPORTED_MODULE_0___default()('barspinner', \"barspinner--\".concat(theme || 'dark'), {\n      invisible: is_invisible\n    }, className)\n  }, Array.from(new Array(5)).map(function (x, inx) {\n    return react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement(\"div\", {\n      key: inx,\n      className: \"barspinner__rect barspinner__rect--\".concat(inx + 1, \" rect\").concat(inx + 1)\n    });\n  }));\n};\n\n/* harmony default export */ __webpack_exports__[\"default\"] = (Loading);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi90ZW1wbGF0ZXMvX2NvbW1vbi9jb21wb25lbnRzL2xvYWRpbmcuanN4LmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vdGVtcGxhdGVzL19jb21tb24vY29tcG9uZW50cy9sb2FkaW5nLmpzeD9jZjg3Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBjbGFzc05hbWVzIGZyb20gJ2NsYXNzbmFtZXMnO1xuaW1wb3J0IFJlYWN0ICAgICAgZnJvbSAncmVhY3QnO1xuXG5jb25zdCBMb2FkaW5nID0gKHsgY2xhc3NOYW1lLCBpc19pbnZpc2libGUsIHRoZW1lLCBpZCB9KSA9PiAoXG4gICAgPGRpdlxuICAgICAgICBpZD17aWR9XG4gICAgICAgIGNsYXNzTmFtZT17XG4gICAgICAgICAgICBjbGFzc05hbWVzKFxuICAgICAgICAgICAgICAgICdiYXJzcGlubmVyJyxcbiAgICAgICAgICAgICAgICBgYmFyc3Bpbm5lci0tJHsgdGhlbWUgfHwgJ2RhcmsnfWAsXG4gICAgICAgICAgICAgICAgeyBpbnZpc2libGU6IGlzX2ludmlzaWJsZSB9LFxuICAgICAgICAgICAgICAgIGNsYXNzTmFtZSxcbiAgICAgICAgICAgIClcbiAgICAgICAgfVxuICAgID5cbiAgICAgICAgeyBBcnJheS5mcm9tKG5ldyBBcnJheSg1KSkubWFwKCh4LCBpbngpID0+IChcbiAgICAgICAgICAgIDxkaXYga2V5PXtpbnh9IGNsYXNzTmFtZT17YGJhcnNwaW5uZXJfX3JlY3QgYmFyc3Bpbm5lcl9fcmVjdC0tJHtpbnggKyAxfSByZWN0JHtpbnggKyAxfWB9IC8+XG4gICAgICAgICkpfVxuICAgIDwvZGl2PlxuKTtcblxuZXhwb3J0IGRlZmF1bHQgTG9hZGluZztcbiJdLCJtYXBwaW5ncyI6IkFBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUVBO0FBQ0E7QUFJQTtBQUFBO0FBTkE7QUFXQTtBQUNBO0FBQUE7QUFBQTtBQURBO0FBWkE7QUFDQTtBQWlCQSIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./templates/_common/components/loading.jsx\n");

/***/ })

}]);