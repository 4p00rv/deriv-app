{"version":3,"sources":["webpack:///./App/Containers/CashierModal/AccountTransfer/account-transfer-form.jsx","webpack:///./App/Containers/CashierModal/AccountTransfer/account-transfer-no-account.jsx","webpack:///./App/Containers/CashierModal/AccountTransfer/account-transfer-no-balance.jsx","webpack:///./App/Containers/CashierModal/AccountTransfer/account-transfer-receipt.jsx","webpack:///./App/Containers/CashierModal/account-transfer.jsx"],"names":["min","max","transfer_limit","errors","getPreBuildDVRs","balance","AccountOption","account","idx","currency","AccountTransferForm","this","props","amount","actions","setSubmitting","mt_accounts_to","selected_to","text","value","is_selected_from","is_selected_from_mt","selected_from","is_selected_from_crypto","is_disabled","is_mt","accounts_to","onTransferPassthrough","isValid","handleChange","from_accounts","to_accounts","field","touched","undefined","transfer_fee","minimum_fee","className","i18n_default_text","values","website_name","isSubmitting","Component","propTypes","accounts_list","PropTypes","array","setErrorMessage","object","connect","modules","cashier","config","account_transfer","onChangeTransferFrom","onChangeTransferTo","requestTransferBetweenAccounts","AccountTransferNoAccount","render","icon","React","localize","AccountTransferNoBalance","setModalIndex","AccountTransferReceipt","amount_transferred","receipt","toggleCashierModal","func","withRouter","resetAccountTransfer","AccountTransfer","setActiveTab","container","onMount","Fragment","is_loading","error","button_text","has_no_account","has_no_balance","is_transfer_successful","string","bool","ui","onMountAccountTransfer"],"mappings":"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","file":"js/6.1104feb93048d9612961.js","sourcesContent":["import classNames             from 'classnames';\nimport PropTypes              from 'prop-types';\nimport React                  from 'react';\nimport {\n    Button,\n    Dropdown,\n    Input }                   from 'deriv-components';\nimport {\n    Field,\n    Formik,\n    Form }                    from 'formik';\nimport { getDecimalPlaces }   from '_common/base/currency_base';\nimport Localize               from 'App/Components/Elements/localize.jsx';\nimport Money                  from 'App/Components/Elements/money.jsx';\nimport { website_name }       from 'App/Constants/app-config';\nimport { localize }           from 'App/i18n';\nimport Icon                   from 'Assets/icon.jsx';\nimport { connect }            from 'Stores/connect';\nimport {\n    getPreBuildDVRs,\n    validNumber }             from 'Utils/Validator/declarative-validation-rules';\nimport Loading                from '../../../../templates/_common/components/loading.jsx';\n\nconst validateTransfer = (values, { balance, currency, transfer_limit }) => {\n    const errors = {};\n\n    if (!values.amount) {\n        errors.amount = localize('This field is required.');\n    } else if (!validNumber(values.amount, { type: 'float', decimals: getDecimalPlaces(currency), min: transfer_limit.min, max: transfer_limit.max })) {\n        errors.amount = getPreBuildDVRs().number.message;\n    } else if (+balance < +values.amount) {\n        errors.amount = localize('Insufficient balance.');\n    }\n\n    return errors;\n};\n\nconst AccountOption = ({ account, idx }) => (\n    <React.Fragment key={idx}>\n        {(account.currency || account.mt_icon) &&\n            <Icon\n                icon='IconAccountsCurrency'\n                className='account-transfer__currency-icon'\n                type={account.mt_icon || account.currency.toLowerCase()}\n                height={16}\n                width={16}\n            />\n        }\n        <span className='account-transfer__currency'>{account.text}</span>\n        <span className='account-transfer__balance'>(<Money amount={account.balance} currency={account.currency} />)</span>\n    </React.Fragment>\n);\n\nclass AccountTransferForm extends React.Component {\n    validateTransferPassthrough = (values) => (\n        validateTransfer(values, {\n            balance       : this.props.selected_from.balance,\n            currency      : this.props.selected_from.currency,\n            transfer_limit: this.props.transfer_limit,\n        })\n    );\n\n    onTransferPassthrough = async (values, actions) => {\n        const transfer_between_accounts = await this.props.requestTransferBetweenAccounts({\n            amount: values.amount,\n        });\n        if (transfer_between_accounts.error) {\n            actions.setSubmitting(false);\n        }\n    };\n\n    render() {\n        const accounts_from    = [];\n        const mt_accounts_from = [];\n        const accounts_to      = [];\n        const mt_accounts_to   = [];\n\n        this.props.accounts_list.forEach((account, idx) => {\n            const text  = <AccountOption idx={idx} account={account} />;\n            const value = account.value;\n            (account.is_mt ? mt_accounts_from : accounts_from).push({\n                text,\n                value,\n            });\n            const is_selected_from        = account.value === this.props.selected_from.value;\n            const is_selected_from_mt     = this.props.selected_from.is_mt && account.is_mt;\n            const is_selected_from_crypto = this.props.selected_from.is_crypto && account.is_crypto;\n            // account from and to cannot be the same\n            // cannot transfer to MT account from MT\n            // cannot transfer to crypto account from crypto\n            const is_disabled = is_selected_from_mt || is_selected_from || is_selected_from_crypto;\n            (account.is_mt ? mt_accounts_to : accounts_to).push({\n                text,\n                value,\n                disabled: is_disabled,\n            });\n        });\n\n        const from_accounts = {\n            [localize('Deriv accounts')]: accounts_from,\n            ...(mt_accounts_from.length && { [localize('DMT5 accounts')]: mt_accounts_from }),\n        };\n\n        const to_accounts = {\n            [localize('Deriv accounts')]: accounts_to,\n            ...(mt_accounts_to.length && { [localize('DMT5 accounts')]: mt_accounts_to }),\n        };\n\n        return (\n            <div className='cashier__wrapper--align-left'>\n                <React.Fragment>\n                    <Formik\n                        initialValues={{\n                            amount: '',\n                        }}\n                        validate={this.validateTransferPassthrough}\n                        onSubmit={this.onTransferPassthrough}\n                    >\n                        {\n                            ({ errors, isSubmitting, isValid, touched, handleChange }) => (\n                                <React.Fragment>\n                                    {isSubmitting ?\n                                        <div className='cashier__loader-wrapper'>\n                                            <Loading className='cashier__loader' />\n                                        </div>\n                                        :\n                                        <Form>\n                                            <Dropdown\n                                                id='transfer_from'\n                                                className='cashier__drop-down account-transfer__drop-down'\n                                                classNameDisplay='cashier__drop-down-display'\n                                                classNameDisplaySpan='cashier__drop-down-display-span'\n                                                classNameItems='cashier__drop-down-items'\n                                                classNameLabel='cashier__drop-down-label'\n                                                list={from_accounts}\n                                                name='transfer_from'\n                                                value={this.props.selected_from.value}\n                                                onChange={this.props.onChangeTransferFrom}\n                                            />\n                                            <Icon className='cashier__transferred-icon account-transfer__transfer-icon' icon='IconBack' />\n                                            <Dropdown\n                                                id='transfer_to'\n                                                className='cashier__drop-down account-transfer__drop-down'\n                                                classNameDisplay='cashier__drop-down-display'\n                                                classNameDisplaySpan='cashier__drop-down-display-span'\n                                                classNameItems='cashier__drop-down-items'\n                                                classNameLabel='cashier__drop-down-label'\n                                                list={to_accounts}\n                                                name='transfer_to'\n                                                value={this.props.selected_to.value}\n                                                onChange={this.props.onChangeTransferTo}\n                                            />\n                                            <Field name='amount'>\n                                                {({ field }) => (\n                                                    <Input\n                                                        { ...field }\n                                                        onChange={(e) => {\n                                                            this.props.setErrorMessage('');\n                                                            handleChange(e);\n                                                        }}\n                                                        className='cashier__input-long dc-input--no-placeholder'\n                                                        type='text'\n                                                        label={localize('Amount')}\n                                                        error={ touched.amount && errors.amount }\n                                                        required\n                                                        leading_icon={\n                                                            this.props.selected_from.currency ?\n                                                                <span className={classNames('symbols', `symbols--${this.props.selected_from.currency.toLowerCase()}`)} />\n                                                                : undefined\n                                                        }\n                                                        autoComplete='off'\n                                                        maxLength='30'\n                                                        hint={\n                                                            this.props.transfer_limit.max &&\n                                                            <Localize\n                                                                i18n_default_text='Transfer limit: <0 />'\n                                                                components={[\n                                                                    <Money\n                                                                        key={0}\n                                                                        amount={this.props.transfer_limit.max}\n                                                                        currency={this.props.selected_from.currency}\n                                                                    />,\n                                                                ]}\n                                                            />\n                                                        }\n                                                    />\n                                                )}\n                                            </Field>\n                                            <div>\n                                                <div className='account-transfer__notes'>\n                                                    <div className='account-transfer__bullet-wrapper'>\n                                                        <div className='account-transfer__bullet' />\n                                                        <span><Localize i18n_default_text='Transfer limits may vary depending on changes in exchange rates.' /></span>\n                                                    </div>\n                                                    <div className='account-transfer__bullet-wrapper'>\n                                                        <div className='account-transfer__bullet' />\n                                                        <span>\n                                                            <Localize\n                                                                i18n_default_text='Transfers are subject to a {{transfer_fee}}% transfer fee or {{currency}} {{minimum_fee}}, whichever is higher.'\n                                                                values={{\n                                                                    transfer_fee: this.props.transfer_fee,\n                                                                    currency    : this.props.selected_from.currency,\n                                                                    minimum_fee : this.props.minimum_fee,\n                                                                }}\n                                                            />\n                                                        </span>\n                                                    </div>\n                                                    <div className='account-transfer__bullet-wrapper'>\n                                                        <div className='account-transfer__bullet' />\n                                                        <span><Localize i18n_default_text='Transfers are possible only between your fiat and cryptocurrency accounts (and vice versa), or between your {{website_name}} account and your {{website_name}} MT5 (DMT5) account (or vice versa).' values={{ website_name }} /></span>\n                                                    </div>\n                                                    <div className='account-transfer__bullet-wrapper'>\n                                                        <div className='account-transfer__bullet' />\n                                                        <span><Localize i18n_default_text='Transfers may be unavailable at times such as when the market is closed (weekends or holidays), periods of high volatility, or when there are technical issues.' /></span>\n                                                    </div>\n                                                </div>\n                                            </div>\n                                            <div className='cashier__form-submit'>\n                                                {this.props.error.message &&\n                                                <React.Fragment>\n                                                    <Icon icon='IconEmergency' className='cashier__form-error-icon' />\n                                                    <Icon icon='IconError' className='cashier__form-error-small-icon' />\n                                                    <p className='cashier__form-error'>\n                                                        {this.props.error.message}\n                                                    </p>\n                                                </React.Fragment>\n                                                }\n                                                <Button\n                                                    className='cashier__form-submit-button btn--primary btn--primary--orange'\n                                                    type='submit'\n                                                    is_disabled={!isValid || isSubmitting}\n                                                >\n                                                    <Localize i18n_default_text='Transfer' />\n                                                </Button>\n                                            </div>\n                                        </Form>\n                                    }\n                                </React.Fragment>\n                            )\n                        }\n                    </Formik>\n                </React.Fragment>\n            </div>\n        );\n    }\n}\n\nAccountTransferForm.propTypes = {\n    accounts_list                 : PropTypes.array,\n    error                         : PropTypes.object,\n    minimum_fee                   : PropTypes.string,\n    onChangeTransferFrom          : PropTypes.func,\n    onChangeTransferTo            : PropTypes.func,\n    requestTransferBetweenAccounts: PropTypes.func,\n    selected_from                 : PropTypes.object,\n    selected_to                   : PropTypes.object,\n    setErrorMessage               : PropTypes.func,\n    transfer_fee                  : PropTypes.number,\n    transfer_limit                : PropTypes.object,\n};\n\nexport default connect(\n    ({ modules }) => ({\n        accounts_list                 : modules.cashier.config.account_transfer.accounts_list,\n        minimum_fee                   : modules.cashier.config.account_transfer.minimum_fee,\n        onChangeTransferFrom          : modules.cashier.onChangeTransferFrom,\n        onChangeTransferTo            : modules.cashier.onChangeTransferTo,\n        requestTransferBetweenAccounts: modules.cashier.requestTransferBetweenAccounts,\n        selected_from                 : modules.cashier.config.account_transfer.selected_from,\n        selected_to                   : modules.cashier.config.account_transfer.selected_to,\n        setErrorMessage               : modules.cashier.setErrorMessage,\n        transfer_fee                  : modules.cashier.config.account_transfer.transfer_fee,\n        transfer_limit                : modules.cashier.config.account_transfer.transfer_limit,\n    })\n)(AccountTransferForm);\n","import React    from 'react';\nimport Icon     from 'Assets/icon.jsx';\nimport Localize from 'App/Components/Elements/localize.jsx';\n\nclass AccountTransferNoAccount extends React.Component {\n    render = () => {\n        return (\n            <div className='cashier__wrapper account-transfer__no-balance'>\n                <Icon icon='IconNoBalance' className='account-transfer__no-balance-icon' />\n                <h2 className='withdraw__header'><Localize i18n_default_text='You need at least two accounts' /></h2>\n                <p className='cashier__text'><Localize i18n_default_text='Please create a second account (Deriv or DMT5) to enable fund transfers.' /></p>\n                {/* TODO: add account opening CTA and MT5 account opening CTA once ready */}\n            </div>\n        );\n    }\n}\n\nexport default AccountTransferNoAccount;\n","import PropTypes        from 'prop-types';\nimport React            from 'react';\nimport { Button }       from 'deriv-components';\nimport Icon             from 'Assets/icon.jsx';\nimport Localize         from 'App/Components/Elements/localize.jsx';\nimport { website_name } from 'App/Constants/app-config';\nimport { localize }     from 'App/i18n';\n\nclass AccountTransferNoBalance extends React.Component {\n    onClickDeposit = () => {\n        // index of deposit tab in the cashier modal is 0\n        this.props.setModalIndex(0);\n    };\n\n    render = () => {\n        return (\n            <div className='cashier__wrapper account-transfer__no-balance'>\n                <Icon icon='IconNoBalance' className='account-transfer__no-balance-icon' />\n                <h2 className='withdraw__header'><Localize i18n_default_text='You have no funds in your {{website_name}} account' values={{ website_name }} /></h2>\n                <p className='cashier__text'><Localize i18n_default_text='Please make a deposit to enable fund transfers.' /></p>\n                <Button\n                    className='btn--primary btn--primary--orange account-transfer__no-balance-button'\n                    has_effect\n                    text={localize('Deposit now')}\n                    onClick={this.onClickDeposit}\n                />\n            </div>\n        );\n    }\n}\n\nAccountTransferNoBalance.propTypes = {\n    setModalIndex: PropTypes.func,\n};\n\nexport default AccountTransferNoBalance;\n","import classNames     from 'classnames';\nimport PropTypes      from 'prop-types';\nimport React          from 'react';\nimport { withRouter } from 'react-router';\nimport { Button }     from 'deriv-components';\nimport Localize       from 'App/Components/Elements/localize.jsx';\nimport { localize }   from 'App/i18n';\nimport Icon           from 'Assets/icon.jsx';\nimport { connect }    from 'Stores/connect';\n\nclass AccountTransferReceipt extends React.Component {\n    componentWillUnmount() {\n        this.props.resetAccountTransfer();\n    }\n\n    render() {\n        const {\n            receipt,\n            selected_from,\n            selected_to,\n        } = this.props;\n\n        return (\n            <div className='cashier__wrapper account-transfer__receipt'>\n                <Icon icon='IconTransferDone' className='account-transfer__receipt-icon' />\n                <h2 className='cashier__header'>\n                    <Localize i18n_default_text='Your funds have been transferred.' />\n                </h2>\n                <div className='cashier__transferred-amount cashier__text--bold'>\n                    <span\n                        className={classNames('symbols', `symbols--${selected_from.currency.toLowerCase()}`)}\n                    />\n                    {receipt.amount_transferred}\n                </div>\n                <div className='cashier__transferred-details-wrapper'>\n                    <span className='account-transfer__transfer-details-from'>\n                        <Icon\n                            icon='IconAccountsCurrency'\n                            type={selected_from.mt_icon || selected_from.currency.toLowerCase()}\n                            height={16}\n                            width={16}\n                        />\n                        <span className='cashier__transferred-details'>\n                            <span className='cashier__text--bold'>{selected_from.text}</span>\n                        </span>\n                    </span>\n                    <Icon className='cashier__transferred-icon' icon='IconBack' />\n                    <span className='account-transfer__transfer-details-to'>\n                        <Icon\n                            icon='IconAccountsCurrency'\n                            type={selected_to.mt_icon || selected_to.currency.toLowerCase()}\n                            height={16}\n                            width={16}\n                        />\n                        <span className='cashier__transferred-details'>\n                            <span className='cashier__text--bold'>{selected_to.text}</span>\n                        </span>\n                    </span>\n                </div>\n                <Button\n                    className='btn--primary btn--primary--orange account-transfer__button-done'\n                    has_effect\n                    text={localize('Done')}\n                    onClick={this.props.resetAccountTransfer}\n                />\n            </div>\n        );\n    }\n}\n\nAccountTransferReceipt.propTypes = {\n    receipt             : PropTypes.object,\n    resetAccountTransfer: PropTypes.func,\n    selected_from       : PropTypes.object,\n    selected_to         : PropTypes.object,\n    toggleCashierModal  : PropTypes.func,\n};\n\nexport default withRouter(connect(\n    ({ modules, ui }) => ({\n        receipt             : modules.cashier.config.account_transfer.receipt,\n        resetAccountTransfer: modules.cashier.resetAccountTransfer,\n        selected_from       : modules.cashier.config.account_transfer.selected_from,\n        selected_to         : modules.cashier.config.account_transfer.selected_to,\n        toggleCashierModal  : ui.toggleCashierModal,\n    })\n)(AccountTransferReceipt));\n","import PropTypes                from 'prop-types';\nimport React                    from 'react';\nimport { connect }              from 'Stores/connect';\nimport AccountTransferForm      from './AccountTransfer/account-transfer-form.jsx';\nimport AccountTransferNoAccount from './AccountTransfer/account-transfer-no-account.jsx';\nimport AccountTransferNoBalance from './AccountTransfer/account-transfer-no-balance.jsx';\nimport AccountTransferReceipt   from './AccountTransfer/account-transfer-receipt.jsx';\nimport Error                    from './error.jsx';\nimport Loading                  from '../../../templates/_common/components/loading.jsx';\n\nclass AccountTransfer extends React.Component {\n    componentDidMount() {\n        this.props.setActiveTab(this.props.container);\n        this.props.onMount();\n    }\n\n    render() {\n        return (\n            <React.Fragment>\n                {this.props.is_loading ?\n                    <Loading className='cashier__loader' />\n                    :\n                    <React.Fragment>\n                        {/* for errors with CTA hide the form and show the error,\n                         for others show them at the bottom of the form next to submit button */}\n                        {this.props.error.button_text ?\n                            <Error error={this.props.error} />\n                            :\n                            (this.props.has_no_account ?\n                                <AccountTransferNoAccount />\n                                :\n                                (this.props.has_no_balance ?\n                                    <AccountTransferNoBalance setModalIndex={this.props.setModalIndex} />\n                                    :\n                                    (this.props.is_transfer_successful ?\n                                        <AccountTransferReceipt />\n                                        :\n                                        <AccountTransferForm error={this.props.error} />\n                                    )\n                                )\n                            )\n                        }\n                    </React.Fragment>\n                }\n            </React.Fragment>\n        );\n    }\n}\n\nAccountTransfer.propTypes = {\n    container             : PropTypes.string,\n    error                 : PropTypes.object,\n    has_no_account        : PropTypes.bool,\n    has_no_balance        : PropTypes.bool,\n    is_loading            : PropTypes.bool,\n    is_transfer_successful: PropTypes.bool,\n    onMount               : PropTypes.func,\n    setActiveTab          : PropTypes.func,\n    setModalIndex         : PropTypes.func,\n};\n\nexport default connect(\n    ({ modules, ui }) => ({\n        container             : modules.cashier.config.account_transfer.container,\n        error                 : modules.cashier.config.account_transfer.error,\n        has_no_account        : modules.cashier.config.account_transfer.has_no_account,\n        has_no_balance        : modules.cashier.config.account_transfer.has_no_balance,\n        is_loading            : modules.cashier.is_loading,\n        is_transfer_successful: modules.cashier.config.account_transfer.is_transfer_successful,\n        onMount               : modules.cashier.onMountAccountTransfer,\n        setActiveTab          : modules.cashier.setActiveTab,\n        setModalIndex         : ui.setModalIndex,\n    })\n)(AccountTransfer);\n"],"sourceRoot":""}