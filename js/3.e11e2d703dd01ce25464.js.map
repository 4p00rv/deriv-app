{"version":3,"sources":["webpack:///./App/Containers/CashierModal/error.jsx","webpack:///./App/Containers/CashierModal/transfer-no-balance.jsx","webpack:///./App/Containers/CashierModal/AccountTransfer/account-transfer-form.jsx","webpack:///./App/Containers/CashierModal/AccountTransfer/account-transfer-no-account.jsx","webpack:///./App/Containers/CashierModal/AccountTransfer/account-transfer-receipt.jsx","webpack:///./App/Containers/CashierModal/account-transfer.jsx"],"names":["ErrorComponent","header","message","button_link","onClickButton","button_text","footer","className","icon","to","onClick","text","Error","error_fields","address_city","localize","address_line_1","address_postcode","address_state","email","phone","residence","props","error","clearErrorMessage","closeCashierModal","toggleCashierModal","setErrorMessage","acceptTNC","WS","tncApproval","AccountError","this","code","i18n_default_text","components","key","target","rel","href","Fragment","fields","values","details","map","field","join","interpolation","escapeValue","React","Component","propTypes","PropTypes","object","func","connect","modules","ui","cashier","render","website_name","TransferNoBalance","setModalIndex","errors","amount","account","idx","AccountOption","balance","AccountTransferForm","currency","transfer_between_accounts","actions","setSubmitting","accounts_to","mt_accounts_to","validateTransferPassthrough","mt_accounts_from","value","is_selected_from_mt","is_selected_from_crypto","is_disabled","is_selected_from","disabled","to_accounts","handleChange","from_accounts","selected_from","onChangeTransferFrom","id","classNameDisplay","classNameDisplaySpan","classNameItems","classNameLabel","label","list","name","selected_to","onChange","onChangeTransferTo","touched","undefined","transfer_limit","transfer_fee","minimum_fee","isSubmitting","accounts_list","array","requestTransferBetweenAccounts","account_transfer","AccountTransferNoAccount","AccountTransferReceipt","amount_transferred","receipt","withRouter","config","resetAccountTransfer","AccountTransfer","setActiveTab","container","onMount","is_loading","is_show_full_page","length","has_no_account","has_no_balance","is_transfer_successful","string","bool","onMountAccountTransfer"],"mappings":"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","file":"js/3.e11e2d703dd01ce25464.js","sourcesContent":["import PropTypes    from 'prop-types';\nimport React        from 'react';\nimport Button       from 'deriv-components/lib/button';\nimport Localize     from 'App/Components/Elements/localize.jsx';\nimport ButtonLink   from 'App/Components/Routes/button-link.jsx';\nimport { localize } from 'App/i18n';\nimport Icon         from 'Assets/icon.jsx';\nimport { WS }       from 'Services';\nimport { connect }  from 'Stores/connect';\n\nconst ErrorComponent = ({\n    header,\n    message,\n    button_link,\n    onClickButton,\n    button_text,\n    footer,\n}) => (\n    <div className='cashier__wrapper'>\n        <Icon icon='IconCashierError' className='cashier-error__icon' />\n        {header && <h2 className='cashier-error__header'>{header}</h2>}\n        <p className='cashier__paragraph'>{message}</p>\n        {button_link &&\n        <ButtonLink\n            className='btn--primary--default cashier-error__button'\n            to={button_link}\n            onClick={onClickButton}\n        >\n            <span className='btn__text'>{button_text}</span>\n        </ButtonLink>\n        }\n        {!button_link && button_text &&\n            <Button\n                className='btn--primary--default cashier-error__button'\n                onClick={onClickButton}\n                text={button_text}\n            />\n        }\n        {footer && <h2 className='cashier-error__footer'>{footer}</h2>}\n    </div>\n);\n\nclass Error extends React.Component {\n    error_fields = {\n        address_city    : localize('Town/City'),\n        address_line_1  : localize('First line of home address'),\n        address_postcode: localize('Postal Code/ZIP'),\n        address_state   : localize('State/Province'),\n        email           : localize('Email address'),\n        phone           : localize('Telephone'),\n        residence       : localize('Country of Residence'),\n    };\n\n    onClickButton = () => {\n        if (typeof this.props.error.onClickButton === 'function') {\n            this.props.error.onClickButton();\n        }\n        this.clearErrorMessage();\n    }\n\n    closeCashierModal = () => {\n        this.onClickButton();\n        this.props.toggleCashierModal();\n    }\n\n    clearErrorMessage = () => {\n        this.props.setErrorMessage('');\n    };\n\n    acceptTNC = async () => {\n        await WS.tncApproval();\n        this.onClickButton();\n    };\n\n    render() {\n        let AccountError;\n        switch (this.props.error.code) {\n            case 'InvalidToken':\n                AccountError = (\n                    <ErrorComponent\n                        header={localize('Identity confirmation failed')}\n                        message={<Localize i18n_default_text='It looks like your link is incorrect or no longer valid.' />}\n                        onClickButton={this.onClickButton}\n                        button_text={localize('Request a new link')}\n                    />\n                );\n                break;\n            case 'ASK_TNC_APPROVAL':\n                AccountError = (\n                    <ErrorComponent\n                        header={localize('Our terms and conditions have changed')}\n                        message={\n                            <Localize\n                                i18n_default_text='Please accept our updated <0>terms and conditions</0> to continue.'\n                                components={[ (\n                                    <a\n                                        key={0}\n                                        className='link'\n                                        target='_blank'\n                                        rel='noopener noreferrer'\n                                        href='https://www.deriv.com/terms-and-conditions/#general'\n                                    />\n                                ) ]}\n                            />\n                        }\n                        onClickButton={this.acceptTNC}\n                        button_text={localize('I accept')}\n                    />\n                );\n                break;\n            case 'ASK_FIX_DETAILS':\n                AccountError = (\n                    <ErrorComponent\n                        header={localize('Update your personal details')}\n                        message={\n                            <React.Fragment>\n                                <Localize i18n_default_text={'We can\\'t validate your personal details because there is some information missing.'} />&nbsp;\n                                {this.props.error.fields ?\n                                    <Localize\n                                        i18n_default_text={'Please update your {{details}} to continue.'}\n                                        values={{\n                                            details      : this.props.error.fields.map(field => (this.error_fields[field] || field)).join(', '),\n                                            interpolation: { escapeValue: false },\n                                        }}\n                                    />\n                                    :\n                                    <Localize i18n_default_text={'Please update your details to continue.'} />\n                                }\n                            </React.Fragment>\n                        }\n                        button_link='/account/personal-details'\n                        onClickButton={this.closeCashierModal}\n                        button_text={localize('Update my details')}\n                        footer={\n                            <Localize\n                                i18n_default_text='Need help? <0>Contact us</0>.'\n                                components={[ (\n                                    <a\n                                        key={0}\n                                        className='link'\n                                        target='_blank'\n                                        rel='noopener noreferrer'\n                                        href='https://www.deriv.com/help-centre/'\n                                    />\n                                ) ]}\n                            />\n                        }\n                    />\n                );\n                break;\n            case 'WrongResponse':\n                AccountError = (\n                    <ErrorComponent\n                        message={this.props.error.message}\n                        onClickButton={this.onClickButton}\n                        button_text={localize('Try again')}\n                    />\n                );\n                break;\n            default:\n                AccountError = <ErrorComponent message={this.props.error.message} />;\n                break;\n        }\n        return AccountError;\n    }\n}\n\nError.propTypes = {\n    error             : PropTypes.object,\n    setErrorMessage   : PropTypes.func,\n    toggleCashierModal: PropTypes.func,\n};\n\nexport default connect(\n    ({ modules, ui }) => ({\n        setErrorMessage   : modules.cashier.setErrorMessage,\n        toggleCashierModal: ui.toggleCashierModal,\n    })\n)(Error);\n","import PropTypes        from 'prop-types';\nimport React            from 'react';\nimport { Button }       from 'deriv-components';\nimport Icon             from 'Assets/icon.jsx';\nimport Localize         from 'App/Components/Elements/localize.jsx';\nimport { website_name } from 'App/Constants/app-config';\nimport { localize }     from 'App/i18n';\n\nclass TransferNoBalance extends React.Component {\n    onClickDeposit = () => {\n        // index of deposit tab in the cashier modal is 0\n        this.props.setModalIndex(0);\n    };\n\n    render = () => {\n        return (\n            <div className='cashier__wrapper account-transfer__no-balance'>\n                <Icon icon='IconNoBalance' className='account-transfer__no-balance-icon' />\n                <h2 className='withdraw__header'><Localize i18n_default_text='You have no funds in your {{website_name}} account' values={{ website_name }} /></h2>\n                <p className='cashier__text'><Localize i18n_default_text='Please make a deposit to enable fund transfers.' /></p>\n                <Button\n                    className='btn--primary--default account-transfer__no-balance-button'\n                    has_effect\n                    text={localize('Deposit now')}\n                    onClick={this.onClickDeposit}\n                />\n            </div>\n        );\n    }\n}\n\nTransferNoBalance.propTypes = {\n    setModalIndex: PropTypes.func,\n};\n\nexport default TransferNoBalance;\n","import classNames             from 'classnames';\nimport PropTypes              from 'prop-types';\nimport React                  from 'react';\nimport {\n    Button,\n    Dropdown,\n    Input,\n    Money }                   from 'deriv-components';\nimport {\n    Field,\n    Formik,\n    Form }                    from 'formik';\nimport CurrencyUtils          from 'deriv-shared/utils/currency';\nimport Localize               from 'App/Components/Elements/localize.jsx';\nimport { website_name }       from 'App/Constants/app-config';\nimport { localize }           from 'App/i18n';\nimport Icon                   from 'Assets/icon.jsx';\nimport { connect }            from 'Stores/connect';\nimport {\n    getPreBuildDVRs,\n    validNumber }             from 'Utils/Validator/declarative-validation-rules';\nimport Loading                from '../../../../templates/_common/components/loading.jsx';\n\nconst validateTransfer = (values, { balance, currency, transfer_limit }) => {\n    const errors = {};\n\n    if (!values.amount) {\n        errors.amount = localize('This field is required.');\n    } else if (!validNumber(values.amount, { type: 'float', decimals: CurrencyUtils.getDecimalPlaces(currency), min: transfer_limit.min, max: transfer_limit.max })) {\n        errors.amount = getPreBuildDVRs().number.message;\n    } else if (+balance < +values.amount) {\n        errors.amount = localize('Insufficient balance.');\n    }\n\n    return errors;\n};\n\nconst AccountOption = ({ account, idx }) => (\n    <React.Fragment key={idx}>\n        {(account.currency || account.mt_icon) &&\n            <Icon\n                icon='IconAccountsCurrency'\n                className='account-transfer__currency-icon'\n                type={account.mt_icon || account.currency.toLowerCase()}\n                height={16}\n                width={16}\n            />\n        }\n        <span className='account-transfer__currency'>{account.text}</span>\n        <span className='account-transfer__balance'>(<Money amount={account.balance} currency={account.currency} />)</span>\n    </React.Fragment>\n);\n\nclass AccountTransferForm extends React.Component {\n    validateTransferPassthrough = (values) => (\n        validateTransfer(values, {\n            balance       : this.props.selected_from.balance,\n            currency      : this.props.selected_from.currency,\n            transfer_limit: this.props.transfer_limit,\n        })\n    );\n\n    onTransferPassthrough = async (values, actions) => {\n        const transfer_between_accounts = await this.props.requestTransferBetweenAccounts({\n            amount: values.amount,\n        });\n        if (transfer_between_accounts.error) {\n            actions.setSubmitting(false);\n        }\n    };\n\n    render() {\n        const accounts_from    = [];\n        const mt_accounts_from = [];\n        const accounts_to      = [];\n        const mt_accounts_to   = [];\n\n        this.props.accounts_list.forEach((account, idx) => {\n            const text  = <AccountOption idx={idx} account={account} />;\n            const value = account.value;\n            (account.is_mt ? mt_accounts_from : accounts_from).push({\n                text,\n                value,\n            });\n            const is_selected_from        = account.value === this.props.selected_from.value;\n            const is_selected_from_mt     = this.props.selected_from.is_mt && account.is_mt;\n            const is_selected_from_crypto = this.props.selected_from.is_crypto && account.is_crypto;\n            // account from and to cannot be the same\n            // cannot transfer to MT account from MT\n            // cannot transfer to crypto account from crypto\n            const is_disabled = is_selected_from_mt || is_selected_from || is_selected_from_crypto;\n            (account.is_mt ? mt_accounts_to : accounts_to).push({\n                text,\n                value,\n                disabled: is_disabled,\n            });\n        });\n\n        const from_accounts = {\n            [localize('Deriv accounts')]: accounts_from,\n            ...(mt_accounts_from.length && { [localize('DMT5 accounts')]: mt_accounts_from }),\n        };\n\n        const to_accounts = {\n            [localize('Deriv accounts')]: accounts_to,\n            ...(mt_accounts_to.length && { [localize('DMT5 accounts')]: mt_accounts_to }),\n        };\n\n        return (\n            <div className='cashier__wrapper--align-left'>\n                <React.Fragment>\n                    <Formik\n                        initialValues={{\n                            amount: '',\n                        }}\n                        validate={this.validateTransferPassthrough}\n                        onSubmit={this.onTransferPassthrough}\n                    >\n                        {\n                            ({ errors, isSubmitting, isValid, touched, handleChange }) => (\n                                <React.Fragment>\n                                    {isSubmitting ?\n                                        <div className='cashier__loader-wrapper'>\n                                            <Loading className='cashier__loader' />\n                                        </div>\n                                        :\n                                        <Form>\n                                            <Dropdown\n                                                id='transfer_from'\n                                                className='cashier__drop-down account-transfer__drop-down'\n                                                classNameDisplay='cashier__drop-down-display'\n                                                classNameDisplaySpan='cashier__drop-down-display-span'\n                                                classNameItems='cashier__drop-down-items'\n                                                classNameLabel='cashier__drop-down-label'\n                                                label={localize('From')}\n                                                list={from_accounts}\n                                                name='transfer_from'\n                                                value={this.props.selected_from.value}\n                                                onChange={this.props.onChangeTransferFrom}\n                                            />\n                                            <Icon className='cashier__transferred-icon account-transfer__transfer-icon' icon='IconBack' />\n                                            <Dropdown\n                                                id='transfer_to'\n                                                className='cashier__drop-down account-transfer__drop-down'\n                                                classNameDisplay='cashier__drop-down-display'\n                                                classNameDisplaySpan='cashier__drop-down-display-span'\n                                                classNameItems='cashier__drop-down-items'\n                                                classNameLabel='cashier__drop-down-label'\n                                                label={localize('To')}\n                                                list={to_accounts}\n                                                name='transfer_to'\n                                                value={this.props.selected_to.value}\n                                                onChange={this.props.onChangeTransferTo}\n                                            />\n                                            <Field name='amount'>\n                                                {({ field }) => (\n                                                    <Input\n                                                        { ...field }\n                                                        onChange={(e) => {\n                                                            this.props.setErrorMessage('');\n                                                            handleChange(e);\n                                                        }}\n                                                        className='cashier__input-long dc-input--no-placeholder'\n                                                        type='text'\n                                                        label={localize('Amount')}\n                                                        error={ touched.amount && errors.amount }\n                                                        required\n                                                        leading_icon={\n                                                            this.props.selected_from.currency ?\n                                                                <span className={classNames('cashier__amount-symbol', 'symbols', `symbols--${this.props.selected_from.currency.toLowerCase()}`)} />\n                                                                : undefined\n                                                        }\n                                                        autoComplete='off'\n                                                        maxLength='30'\n                                                        hint={\n                                                            this.props.transfer_limit.max &&\n                                                            <Localize\n                                                                i18n_default_text='Transfer limit: <0 />'\n                                                                components={[\n                                                                    <Money\n                                                                        key={0}\n                                                                        amount={this.props.transfer_limit.max}\n                                                                        currency={this.props.selected_from.currency}\n                                                                    />,\n                                                                ]}\n                                                            />\n                                                        }\n                                                    />\n                                                )}\n                                            </Field>\n                                            <div>\n                                                <div className='account-transfer__notes'>\n                                                    <div className='account-transfer__bullet-wrapper'>\n                                                        <div className='account-transfer__bullet' />\n                                                        <span><Localize i18n_default_text='Transfer limits may vary depending on changes in exchange rates.' /></span>\n                                                    </div>\n                                                    <div className='account-transfer__bullet-wrapper'>\n                                                        <div className='account-transfer__bullet' />\n                                                        <span>\n                                                            <Localize\n                                                                i18n_default_text='Transfers are subject to a {{transfer_fee}}% transfer fee or {{currency}} {{minimum_fee}}, whichever is higher.'\n                                                                values={{\n                                                                    transfer_fee: this.props.transfer_fee,\n                                                                    currency    : this.props.selected_from.currency,\n                                                                    minimum_fee : this.props.minimum_fee,\n                                                                }}\n                                                            />\n                                                        </span>\n                                                    </div>\n                                                    <div className='account-transfer__bullet-wrapper'>\n                                                        <div className='account-transfer__bullet' />\n                                                        <span><Localize i18n_default_text='Transfers are possible only between your fiat and cryptocurrency accounts (and vice versa), or between your {{website_name}} account and your {{website_name}} MT5 (DMT5) account (or vice versa).' values={{ website_name }} /></span>\n                                                    </div>\n                                                    <div className='account-transfer__bullet-wrapper'>\n                                                        <div className='account-transfer__bullet' />\n                                                        <span><Localize i18n_default_text='Transfers may be unavailable at times such as when the market is closed (weekends or holidays), periods of high volatility, or when there are technical issues.' /></span>\n                                                    </div>\n                                                </div>\n                                            </div>\n                                            <div className='cashier__form-submit'>\n                                                {this.props.error.message &&\n                                                <React.Fragment>\n                                                    <Icon icon='IconEmergency' className='cashier__form-error-icon' />\n                                                    <Icon icon='IconError' className='cashier__form-error-small-icon' />\n                                                    <p className='cashier__form-error'>\n                                                        {this.props.error.message}\n                                                    </p>\n                                                </React.Fragment>\n                                                }\n                                                <Button\n                                                    className='cashier__form-submit-button btn--primary--default'\n                                                    type='submit'\n                                                    is_disabled={!isValid || isSubmitting}\n                                                >\n                                                    <Localize i18n_default_text='Transfer' />\n                                                </Button>\n                                            </div>\n                                        </Form>\n                                    }\n                                </React.Fragment>\n                            )\n                        }\n                    </Formik>\n                </React.Fragment>\n            </div>\n        );\n    }\n}\n\nAccountTransferForm.propTypes = {\n    accounts_list                 : PropTypes.array,\n    error                         : PropTypes.object,\n    minimum_fee                   : PropTypes.string,\n    onChangeTransferFrom          : PropTypes.func,\n    onChangeTransferTo            : PropTypes.func,\n    requestTransferBetweenAccounts: PropTypes.func,\n    selected_from                 : PropTypes.object,\n    selected_to                   : PropTypes.object,\n    setErrorMessage               : PropTypes.func,\n    transfer_fee                  : PropTypes.number,\n    transfer_limit                : PropTypes.object,\n};\n\nexport default connect(\n    ({ modules }) => ({\n        accounts_list                 : modules.cashier.config.account_transfer.accounts_list,\n        minimum_fee                   : modules.cashier.config.account_transfer.minimum_fee,\n        onChangeTransferFrom          : modules.cashier.onChangeTransferFrom,\n        onChangeTransferTo            : modules.cashier.onChangeTransferTo,\n        requestTransferBetweenAccounts: modules.cashier.requestTransferBetweenAccounts,\n        selected_from                 : modules.cashier.config.account_transfer.selected_from,\n        selected_to                   : modules.cashier.config.account_transfer.selected_to,\n        setErrorMessage               : modules.cashier.setErrorMessage,\n        transfer_fee                  : modules.cashier.config.account_transfer.transfer_fee,\n        transfer_limit                : modules.cashier.config.account_transfer.transfer_limit,\n    })\n)(AccountTransferForm);\n","import React    from 'react';\nimport Icon     from 'Assets/icon.jsx';\nimport Localize from 'App/Components/Elements/localize.jsx';\n\nclass AccountTransferNoAccount extends React.Component {\n    render = () => {\n        return (\n            <div className='cashier__wrapper account-transfer__no-balance'>\n                <Icon icon='IconNoBalance' className='account-transfer__no-balance-icon' />\n                <h2 className='withdraw__header'><Localize i18n_default_text='You need at least two accounts' /></h2>\n                <p className='cashier__text'><Localize i18n_default_text='Please create a second account (Deriv or DMT5) to enable fund transfers.' /></p>\n                {/* TODO: add account opening CTA and MT5 account opening CTA once ready */}\n            </div>\n        );\n    }\n}\n\nexport default AccountTransferNoAccount;\n","import classNames     from 'classnames';\nimport PropTypes      from 'prop-types';\nimport React          from 'react';\nimport { withRouter } from 'react-router';\nimport { Button }     from 'deriv-components';\nimport Localize       from 'App/Components/Elements/localize.jsx';\nimport { localize }   from 'App/i18n';\nimport Icon           from 'Assets/icon.jsx';\nimport { connect }    from 'Stores/connect';\n\nclass AccountTransferReceipt extends React.Component {\n    componentWillUnmount() {\n        this.props.resetAccountTransfer();\n    }\n\n    render() {\n        const {\n            receipt,\n            selected_from,\n            selected_to,\n        } = this.props;\n\n        return (\n            <div className='cashier__wrapper account-transfer__receipt'>\n                <Icon icon='IconTransferDone' className='account-transfer__receipt-icon' />\n                <h2 className='cashier__header'>\n                    <Localize i18n_default_text='Your funds have been transferred.' />\n                </h2>\n                <div className='cashier__transferred-amount cashier__text--bold'>\n                    <span\n                        className={classNames('symbols', `symbols--${selected_from.currency.toLowerCase()}`)}\n                    />\n                    {receipt.amount_transferred}\n                </div>\n                <div className='cashier__transferred-details-wrapper'>\n                    <span className='account-transfer__transfer-details-from'>\n                        <Icon\n                            icon='IconAccountsCurrency'\n                            type={selected_from.mt_icon || selected_from.currency.toLowerCase()}\n                            height={16}\n                            width={16}\n                        />\n                        <span className='cashier__transferred-details'>\n                            <span className='cashier__text--bold'>{selected_from.text}</span>\n                        </span>\n                    </span>\n                    <Icon className='cashier__transferred-icon' icon='IconBack' />\n                    <span className='account-transfer__transfer-details-to'>\n                        <Icon\n                            icon='IconAccountsCurrency'\n                            type={selected_to.mt_icon || selected_to.currency.toLowerCase()}\n                            height={16}\n                            width={16}\n                        />\n                        <span className='cashier__transferred-details'>\n                            <span className='cashier__text--bold'>{selected_to.text}</span>\n                        </span>\n                    </span>\n                </div>\n                <Button\n                    className='btn--primary--default account-transfer__button-done'\n                    has_effect\n                    text={localize('Done')}\n                    onClick={this.props.resetAccountTransfer}\n                />\n            </div>\n        );\n    }\n}\n\nAccountTransferReceipt.propTypes = {\n    receipt             : PropTypes.object,\n    resetAccountTransfer: PropTypes.func,\n    selected_from       : PropTypes.object,\n    selected_to         : PropTypes.object,\n};\n\nexport default withRouter(connect(\n    ({ modules }) => ({\n        receipt             : modules.cashier.config.account_transfer.receipt,\n        resetAccountTransfer: modules.cashier.resetAccountTransfer,\n        selected_from       : modules.cashier.config.account_transfer.selected_from,\n        selected_to         : modules.cashier.config.account_transfer.selected_to,\n    })\n)(AccountTransferReceipt));\n","import PropTypes                from 'prop-types';\nimport React                    from 'react';\nimport { connect }              from 'Stores/connect';\nimport AccountTransferForm      from './AccountTransfer/account-transfer-form.jsx';\nimport AccountTransferNoAccount from './AccountTransfer/account-transfer-no-account.jsx';\nimport AccountTransferReceipt   from './AccountTransfer/account-transfer-receipt.jsx';\nimport Error                    from './error.jsx';\nimport TransferNoBalance        from './transfer-no-balance.jsx';\nimport Loading                  from '../../../templates/_common/components/loading.jsx';\n\nclass AccountTransfer extends React.Component {\n    componentDidMount() {\n        this.props.setActiveTab(this.props.container);\n        this.props.onMount();\n    }\n\n    render() {\n        return (\n            <React.Fragment>\n                {this.props.is_loading ?\n                    <Loading className='cashier__loader' />\n                    :\n                    <React.Fragment>\n                        {this.props.error.is_show_full_page ||\n                        (this.props.error.message && !this.props.accounts_list.length) ?\n                            <Error error={this.props.error} />\n                            :\n                            (this.props.has_no_account ?\n                                <AccountTransferNoAccount />\n                                :\n                                (this.props.has_no_balance ?\n                                    <TransferNoBalance setModalIndex={this.props.setModalIndex} />\n                                    :\n                                    (this.props.is_transfer_successful ?\n                                        <AccountTransferReceipt />\n                                        :\n                                        <AccountTransferForm error={this.props.error} />\n                                    )\n                                )\n                            )\n                        }\n                    </React.Fragment>\n                }\n            </React.Fragment>\n        );\n    }\n}\n\nAccountTransfer.propTypes = {\n    accounts_list         : PropTypes.array,\n    container             : PropTypes.string,\n    error                 : PropTypes.object,\n    has_no_account        : PropTypes.bool,\n    has_no_balance        : PropTypes.bool,\n    is_loading            : PropTypes.bool,\n    is_transfer_successful: PropTypes.bool,\n    onMount               : PropTypes.func,\n    setActiveTab          : PropTypes.func,\n    setModalIndex         : PropTypes.func,\n};\n\nexport default connect(\n    ({ modules, ui }) => ({\n        accounts_list         : modules.cashier.config.account_transfer.accounts_list,\n        container             : modules.cashier.config.account_transfer.container,\n        error                 : modules.cashier.config.account_transfer.error,\n        has_no_account        : modules.cashier.config.account_transfer.has_no_account,\n        has_no_balance        : modules.cashier.config.account_transfer.has_no_balance,\n        is_loading            : modules.cashier.is_loading,\n        is_transfer_successful: modules.cashier.config.account_transfer.is_transfer_successful,\n        onMount               : modules.cashier.onMountAccountTransfer,\n        setActiveTab          : modules.cashier.setActiveTab,\n        setModalIndex         : ui.setModalIndex,\n    })\n)(AccountTransfer);\n"],"sourceRoot":""}