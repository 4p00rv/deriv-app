{"version":3,"sources":["webpack:///./App/Components/Elements/Label/label.jsx","webpack:///./App/Components/Elements/money.jsx","webpack:///./Modules/Reports/Containers/wallet-information.jsx"],"names":["available_modes","available_sizes","Label","_ref","_classNames","mode","children","_ref$size","size","type","some","m","scale","s","react_default","a","createElement","className","classNames","_defineProperty","concat","propTypes","PropTypes","oneOfType","arrayOf","node","oneOf","Money","amount","_ref$currency","currency","has_sign","_ref$is_formatted","is_formatted","sign","abs_value","Math","abs","final_amount","formatMoney","Fragment","toLowerCase","number","string","bool","Description","is_virtual","localize","i18n_default_text","values","toUpperCase","WalletInformation","_ref2","balance","has_description","has_loginid","is_website_status_ready","loginid","icon","wallet_information_Description","label","money","connect","_ref3","client"],"mappings":"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","file":"js/wallet-information.fdd579887daa9d0d0729.js","sourcesContent":["import classNames from 'classnames';\nimport React      from 'react';\nimport PropTypes  from 'prop-types';\n\nconst available_modes = [\n    'default',\n    'success',\n    'warn',\n    'danger',\n    'info',\n    'success-invert',\n    'warn-invert',\n];\n\nconst available_sizes = [\n    'regular',\n    'large',\n];\n\nconst Label = ({ mode, children, size = 'regular' }) => {\n    const type = available_modes.some(m => m === mode) ? mode : 'default';\n    const scale = available_sizes.some(s => s === size) ? size : 'regular';\n\n    return (\n        <span className={classNames('label', {\n            [`label--${scale}`]: scale,\n            [`label--${type}`] : type,\n        })}\n        >{children}\n        </span>\n    );\n};\nLabel.propTypes = {\n    children: PropTypes.oneOfType([\n        PropTypes.arrayOf(PropTypes.node),\n        PropTypes.node,\n    ]),\n    mode: PropTypes.oneOf(available_modes),\n};\nexport default Label;\n","import classNames      from 'classnames';\nimport PropTypes       from 'prop-types';\nimport React           from 'react';\nimport { formatMoney } from '_common/base/currency_base';\n\nconst Money = ({\n    amount,\n    className,\n    currency = 'USD',\n    has_sign,\n    is_formatted = true,\n}) => {\n    let sign = '';\n    if (+amount && (amount < 0 || has_sign)) {\n        sign = amount > 0 ? '+' : '-';\n    }\n\n    const abs_value = Math.abs(amount);\n    const final_amount = is_formatted ? formatMoney(currency, abs_value, true) : abs_value;\n\n    return (\n        <React.Fragment>\n            {has_sign && sign}\n            <span className={classNames(className, 'symbols', `symbols--${currency.toLowerCase()}`)} />\n            {final_amount}\n        </React.Fragment>\n    );\n};\n\nMoney.propTypes = {\n    amount: PropTypes.oneOfType([\n        PropTypes.number,\n        PropTypes.string,\n    ]),\n    className   : PropTypes.string,\n    currency    : PropTypes.string,\n    has_sign    : PropTypes.bool,\n    is_formatted: PropTypes.bool,\n};\n\nexport default Money;\n","import PropTypes         from 'prop-types';\nimport React             from 'react';\nimport Icon              from 'Assets/icon.jsx';\nimport Label             from 'App/Components/Elements/Label/label.jsx';\nimport Localize          from 'App/Components/Elements/localize.jsx';\nimport Money             from 'App/Components/Elements/money.jsx';\nimport { connect }       from 'Stores/connect';\n\nconst Description = ({ currency, is_virtual }) => (\n    is_virtual ?\n        <Localize i18n_default_text='Practice wallet' />\n        :\n        <Localize i18n_default_text='{{currency}} wallet' values={{ currency: currency.toUpperCase() }} />\n\n);\n\nconst WalletInformation = ({\n    currency,\n    balance,\n    has_description,\n    has_loginid,\n    is_virtual,\n    is_website_status_ready,\n    loginid,\n}) => {\n    return (\n        <div className='account-wallet'>\n            {!is_virtual && <Icon icon='IconAccountsCurrency' type={currency.toLowerCase()} />}\n            {is_virtual && <Icon icon='IconDemo' />}\n            <span className='description'>\n                { has_description ?\n                    <Description currency={currency} is_virtual={is_virtual} />\n                    :\n                    <span className='description__currency'>{currency.toUpperCase()}</span>\n                }\n            </span>\n            {has_loginid && <span className='current-loginid'>{loginid}</span>}\n            {is_website_status_ready &&\n            <Label mode={`${is_virtual ? 'warn-invert' : 'success-invert'}`} size='large'>\n                <Money amount={balance} currency={currency} />\n            </Label>\n            }\n            {!is_website_status_ready && <div />}\n        </div>\n    );\n};\n\nWalletInformation.propTypes = {\n    has_description: PropTypes.bool,\n    has_loginid    : PropTypes.bool,\n};\n\nexport default connect(({ client }) => ({\n    balance                : client.balance,\n    currency               : client.currency,\n    is_virtual             : client.is_virtual,\n    is_website_status_ready: client.is_website_status_ready,\n    loginid                : client.loginid,\n}))(WalletInformation);\n"],"sourceRoot":""}