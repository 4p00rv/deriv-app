{"version":3,"sources":["webpack:///./App/Containers/RealAccountSignup/upgrade-button.jsx","webpack:///./App/Containers/AccountSwitcher/account-switcher.jsx","webpack:///./App/Components/Layout/Header/account-info.jsx"],"names":["icon","onClick","UpgradeButton","text","PropTypes","string","wrapper_ref","accounts_toggle_btn","target","classList","handleLogout","props","requestLogout","cleanUp","document","account_loginid","this","has_error","a_currency","accounts","CurrencyUtils","b_currency","a","is_virtual","a_is_crypto","b_is_crypto","a_is_fiat","setWrapperRef","can_upgrade","can_manage_currency","map","loginid","account","className","classNames","currency","can_upgrade_to","window","urlFor","obj_total_balance","React","Component","AccountSwitcher","propTypes","clearContracts","clearPositions","func","display","has_fiat","bool","hideDialog","is_logged_in","is_positions_drawer_on","is_upgrade_enabled","is_visible","toggle","togglePositionsDrawer","client","modules","can_change_currency","account_list","switchAccount","clearError","contract_trade","openRealAccountSignup","account_switcher","AccountInfo","state","showDialog","setState","balance","is_dialog_on","toggleDialog","type","toLowerCase","i18n_default_text","in","timeout","enter","enterDone","exit","onEntered","unmountOnExit","account_type"],"mappings":"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","file":"js/account-info.6f050be3482218f3df1a.js","sourcesContent":["import { Button } from 'deriv-components';\nimport PropTypes  from 'prop-types';\nimport React      from 'react';\n\nconst UpgradeButton = ({ children, onClick, icon }) => (\n    <div className='acc-switcher__new-account'>\n        <Button\n            id='upgrade-account'\n            onClick={onClick}\n            className='acc-switcher__new-account-link'\n            tertiary\n            icon={icon}\n        >\n            {children}\n        </Button>\n    </div>\n);\n\nUpgradeButton.propTypes = {\n    icon   : PropTypes.node,\n    onClick: PropTypes.func,\n    text   : PropTypes.string,\n};\n\nexport default UpgradeButton;\n","import classNames        from 'classnames';\nimport PropTypes         from 'prop-types';\nimport React             from 'react';\nimport {\n    Money,\n    Popover }            from 'deriv-components';\nimport CurrencyUtils     from 'deriv-shared/utils/currency';\nimport { localize }      from 'App/i18n';\nimport { urlFor }        from '_common/url';\nimport UpgradeButton     from 'App/Containers/RealAccountSignup/upgrade-button.jsx';\nimport Icon              from 'Assets/icon.jsx';\nimport { requestLogout } from 'Services/index';\nimport { connect }       from 'Stores/connect';\nimport Localize          from 'App/Components/Elements/localize.jsx';\n\nclass AccountSwitcher extends React.Component {\n    setWrapperRef = (node) => {\n        this.wrapper_ref = node;\n    };\n\n    handleClickOutside = (event) => {\n        const accounts_toggle_btn = !(event.target.classList.contains('acc-info'));\n        if (this.wrapper_ref && !this.wrapper_ref.contains(event.target)\n            && this.props.is_visible && accounts_toggle_btn) {\n            this.props.toggle();\n        }\n    };\n\n    handleLogout = () => {\n        this.props.toggle();\n        if (this.props.is_positions_drawer_on) {\n            this.props.togglePositionsDrawer(); // TODO: hide drawer inside logout, once it is a mobx action\n        }\n        requestLogout().then(this.props.cleanUp);\n    };\n\n    componentDidMount() {\n        document.addEventListener('mousedown', this.handleClickOutside);\n    }\n\n    componentWillUnmount() {\n        document.removeEventListener('mousedown', this.handleClickOutside);\n        this.props.hideDialog();\n    }\n\n    async doSwitch(loginid) {\n        this.props.toggle();\n        if (this.props.account_loginid === loginid) return;\n        await this.props.clearPositions();\n        await this.props.clearContracts();\n        await this.props.switchAccount(loginid);\n\n        if (this.props.has_error) {\n            this.props.clearError();\n        }\n    }\n\n    get can_manage_currency () {\n        return this.props.can_change_currency ||\n            (!this.props.is_virtual && !this.props.has_fiat && this.props.can_upgrade_to);\n    }\n\n    render() {\n        if (!this.props.is_logged_in) return false;\n        // TODO: Once we allow other real accounts (apart from CR), assign correct title and group accounts into list with correct account title/types\n        // e.g - Real, Financial, Gaming, Investment\n        const can_upgrade = !!(this.props.is_upgrade_enabled && this.props.is_virtual && this.props.can_upgrade_to);\n\n        // sort accounts as follows:\n        // top is fiat, then crypto (each alphabetically by currency), then demo\n        this.props.account_list.sort((a, b) => {\n            const a_currency = this.props.accounts[a.loginid].currency;\n            const b_currency = this.props.accounts[b.loginid].currency;\n            const a_is_crypto = CurrencyUtils.isCryptocurrency(a_currency);\n            const b_is_crypto = CurrencyUtils.isCryptocurrency(b_currency);\n            const a_is_fiat = !a_is_crypto;\n            const b_is_fiat = !b_is_crypto;\n            if (a.is_virtual || b.is_virtual) {\n                return a.is_virtual ? 1 : -1;\n            } else if ((a_is_crypto && b_is_crypto) || (a_is_fiat && b_is_fiat)) {\n                return a_currency < b_currency ? -1 : 1;\n            } else if (a_is_fiat && b_is_crypto) {\n                return -1;\n            }\n            return 1;\n        });\n\n        return (\n            <div className='acc-switcher__list' ref={this.setWrapperRef} style={{ display: this.props.display }}>\n                <div className={(can_upgrade || this.can_manage_currency) ? undefined : 'acc-switcher__list-group'}>\n                    <span className='acc-switcher__list-title'>\n                        <Localize i18n_default_text='Accounts' />\n                    </span>\n                    <div className='acc-switcher__accounts'>\n                        {\n                            this.props.account_list.map((account) => (\n                                <Popover\n                                    alignment='left'\n                                    message={account.loginid}\n                                    key={account.loginid}\n                                >\n                                    <div\n                                        id={`dt_${account.loginid}`}\n                                        className={classNames('acc-switcher__account', {\n                                            'acc-switcher__account--selected': account.loginid === this.props.account_loginid,\n                                            'acc-switcher__account--disabled': account.is_disabled,\n                                        })}\n                                        onClick={account.is_disabled\n                                            ? undefined\n                                            : this.doSwitch.bind(this, account.loginid)\n                                        }\n                                    >\n                                        <span className={'acc-switcher__id'}>\n                                            <Icon\n                                                icon='IconAccountsCurrency'\n                                                className={`acc-switcher__id-icon acc-switcher__id-icon--${account.icon}`}\n                                                type={account.icon}\n                                            />\n                                            <span>\n                                                {account.is_virtual ?\n                                                    <Localize i18n_default_text='Demo' /> :\n                                                    account.icon.toUpperCase() === 'REAL' ?\n                                                        <Localize i18n_default_text='Real' /> :\n                                                        account.icon.toUpperCase()\n                                                }\n                                            </span>\n                                            {'balance' in this.props.accounts[account.loginid] &&\n                                            <span className={classNames('acc-switcher__balance', { 'acc-switcher__balance--virtual': account.is_virtual })}>\n                                                {this.props.accounts[account.loginid].currency &&\n                                                <Money\n                                                    currency={this.props.accounts[account.loginid].currency}\n                                                    amount={\n                                                        CurrencyUtils.formatMoney(\n                                                            this.props.accounts[account.loginid].currency,\n                                                            this.props.accounts[account.loginid].balance,\n                                                            true\n                                                        )\n                                                    }\n                                                    should_format={false}\n                                                />\n                                                }\n                                                {!this.props.accounts[account.loginid].currency &&\n                                                    <span className='no-currency'><Localize\n                                                        i18n_default_text='No currency assigned'\n                                                    />\n                                                    </span>\n                                                }\n                                            </span>\n                                            }\n                                        </span>\n                                    </div>\n                                </Popover>\n                            ))\n                        }\n                    </div>\n\n                    {this.can_manage_currency && !can_upgrade &&\n                        <UpgradeButton\n                            onClick={this.props.openRealAccountSignup}\n                            icon={<Icon icon='IconAdd' />}\n                        >\n                            <Localize\n                                i18n_default_text='Add/manage account'\n                            />\n                        </UpgradeButton>\n                    }\n                </div>\n                { can_upgrade &&\n                <UpgradeButton\n                    onClick={() => {\n                        if (this.props.can_upgrade_to === 'svg') {\n                            this.props.openRealAccountSignup();\n                        } else {\n                            window.open(urlFor('new_account/maltainvestws', undefined, undefined, true));\n                        }\n                    }}\n                    icon={<Icon icon='IconAdd' />}\n                >\n                    <Localize\n                        i18n_default_text='Add a real account'\n                    />\n                </UpgradeButton>\n                }\n                <div className='acc-switcher__separator' />\n\n                <div className='acc-switcher__total'>\n                    <Localize i18n_default_text='Total assets' />\n                    <span className='acc-switcher__balance'>\n                        <Money\n                            currency={this.props.obj_total_balance.currency}\n                            amount={\n                                CurrencyUtils.formatMoney(\n                                    this.props.obj_total_balance.currency,\n                                    this.props.obj_total_balance.amount,\n                                    true\n                                )\n                            }\n                            should_format={false}\n                        />\n                    </span>\n                </div>\n\n                <div className='acc-switcher__separator' />\n\n                <div id='dt_logout_button' className='acc-switcher__logout' onClick={this.handleLogout}>\n                    <span className='acc-switcher__logout-text'>{localize('Log out')}</span>\n                    <Icon icon='IconLogout' className='acc-switcher__logout-icon drawer__icon' />\n                </div>\n            </div>\n        );\n    }\n}\n\nAccountSwitcher.propTypes = {\n    account_list          : PropTypes.array,\n    account_loginid       : PropTypes.string,\n    accounts              : PropTypes.object,\n    cleanUp               : PropTypes.func,\n    clearContracts        : PropTypes.func,\n    clearError            : PropTypes.func,\n    clearPositions        : PropTypes.func,\n    display               : PropTypes.string,\n    has_error             : PropTypes.bool,\n    has_fiat              : PropTypes.bool,\n    hideDialog            : PropTypes.func,\n    is_logged_in          : PropTypes.bool,\n    is_positions_drawer_on: PropTypes.bool,\n    is_upgrade_enabled    : PropTypes.bool,\n    is_virtual            : PropTypes.bool,\n    is_visible            : PropTypes.bool,\n    obj_total_balance     : PropTypes.object,\n    toggle                : PropTypes.func,\n    togglePositionsDrawer : PropTypes.func,\n};\n\nconst account_switcher = connect(\n    ({ client, ui, modules }) => ({\n        accounts              : client.accounts,\n        has_fiat              : client.has_fiat,\n        can_change_currency   : client.can_change_currency,\n        account_list          : client.account_list,\n        can_upgrade           : client.can_upgrade,\n        can_upgrade_to        : client.can_upgrade_to,\n        account_loginid       : client.loginid,\n        is_logged_in          : client.is_logged_in,\n        is_virtual            : client.is_virtual,\n        obj_total_balance     : client.obj_total_balance,\n        switchAccount         : client.switchAccount,\n        cleanUp               : client.cleanUp,\n        clearError            : modules.contract_trade.clearError,\n        has_error             : modules.contract_trade.has_error,\n        clearPositions        : modules.portfolio.clearTable,\n        clearContracts        : modules.trade.clearContracts,\n        is_positions_drawer_on: ui.is_positions_drawer_on,\n        openRealAccountSignup : ui.openRealAccountSignup,\n        togglePositionsDrawer : ui.togglePositionsDrawer,\n    }),\n)(AccountSwitcher);\n\nexport { account_switcher as AccountSwitcher };\n","import classNames          from 'classnames';\nimport PropTypes           from 'prop-types';\nimport React               from 'react';\nimport { CSSTransition }   from 'react-transition-group';\nimport Localize            from 'App/Components/Elements/localize.jsx';\nimport { AccountSwitcher } from 'App/Containers/AccountSwitcher';\nimport Icon                from 'Assets/icon.jsx';\n\n// todo fix absolute path\n\nclass AccountInfo extends React.Component {\n    state = {\n        display: 'none',\n    };\n\n    showDialog = () => {\n        this.setState({ display: 'block' });\n    };\n\n    hideDialog = () => {\n        this.setState({ display: 'none' });\n    };\n\n    render() {\n        const {\n            balance,\n            currency,\n            is_dialog_on,\n            is_upgrade_enabled,\n            is_virtual,\n            toggleDialog,\n        } = this.props;\n\n        return (\n            <div className='acc-info__wrapper'>\n                <div className='acc-info__separator' />\n                <div\n                    className={classNames('acc-info', {\n                        'acc-info--show'      : is_dialog_on,\n                        'acc-info--is-virtual': is_virtual,\n                    })}\n                    onClick={toggleDialog}\n                >\n                    <span\n                        className='acc-info__id'\n                    >\n                        <Icon\n                            icon='IconAccountsCurrency'\n                            className={`acc-info__id-icon acc-info__id-icon--${is_virtual ? 'virtual' : currency}`}\n                            type={is_virtual ? 'virtual' : (currency || 'real').toLowerCase()}\n                        />\n                    </span>\n                    {\n                        typeof balance !== 'undefined' &&\n                        <p className='acc-info__balance'>\n                            <span\n                                className={classNames('symbols', { [`symbols--${(currency || '').toLowerCase()}`]: currency })}\n                            />\n                            {!currency &&\n                            <Localize\n                                i18n_default_text='No currency assigned'\n                            />\n                            }\n                            {currency && balance}\n                        </p>\n                    }\n                    <Icon icon='IconArrowBold' className='acc-info__select-arrow' />\n                </div>\n                <CSSTransition\n                    in={is_dialog_on}\n                    timeout={200}\n                    classNames={{\n                        enter    : 'acc-switcher__wrapper--enter',\n                        enterDone: 'acc-switcher__wrapper--enter-done',\n                        exit     : 'acc-switcher__wrapper--exit',\n                    }}\n                    onEntered={this.showDialog}\n                    unmountOnExit\n                >\n                    <div className='acc-switcher__wrapper'>\n                        <AccountSwitcher\n                            is_visible={is_dialog_on}\n                            hideDialog={this.hideDialog}\n                            display={this.state.display}\n                            toggle={toggleDialog}\n                            is_upgrade_enabled={is_upgrade_enabled}\n                        />\n                    </div>\n                </CSSTransition>\n            </div>\n        );\n    }\n}\n\nAccountInfo.propTypes = {\n    account_type      : PropTypes.string,\n    balance           : PropTypes.string,\n    currency          : PropTypes.string,\n    is_dialog_on      : PropTypes.bool,\n    is_upgrade_enabled: PropTypes.bool,\n    is_virtual        : PropTypes.bool,\n    loginid           : PropTypes.string,\n    toggleDialog      : PropTypes.func,\n};\n\nexport default AccountInfo;\n"],"sourceRoot":""}