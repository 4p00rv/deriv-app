{"version":3,"sources":["webpack:///./App/Components/Elements/Label/label.jsx","webpack:///./Modules/Reports/Components/empty-trade-history-message.jsx","webpack:///./Modules/Reports/Components/reports-meta.jsx","webpack:///./Modules/Reports/Components/placeholder-component.jsx","webpack:///./App/Containers/ProgressSliderStream/progress-slider-stream.jsx","webpack:///./Modules/Reports/Helpers/profit-loss.js","webpack:///./Modules/Reports/Components/indicative-cell.jsx","webpack:///./Modules/Reports/Components/market-symbol-icon-row.jsx","webpack:///./Modules/Reports/Components/profit_loss_cell.jsx","webpack:///./Modules/Reports/Constants/data-table-constants.js","webpack:///./App/Components/Elements/DataTable/table-cell.jsx","webpack:///./App/Components/Elements/DataTable/table-row-info.jsx","webpack:///./App/Components/Elements/DataTable/table-row.jsx","webpack:///./App/Components/Elements/DataTable/data-table.jsx"],"names":["available_modes","available_sizes","Label","mode","children","size","type","some","m","scale","s","className","classNames","propTypes","PropTypes","oneOfType","arrayOf","node","oneOf","EmptyTradeHistoryMessage","has_selected_date","component_icon","localized_message","localized_period_message","Fragment","icon","string","bool","ReportsMeta","i18n_heading","i18n_message","filter_component","PlaceholderComponent","props","EmptyMessageComponent","empty_message_component","is_empty","is_loading","func","ProgressSliderStream","id","position","getPositionById","contract_info","expiry_time","date_expiry","has_result","current_tick","start_time","date_start","ticks_count","tick_count","number","server_time","object","connect","modules","portfolio","getProfitOrLoss","value","replace","IndicativeCell","state","movement","amount","React","PureComponent","this","setState","currency","status","Math","abs","localize","MarketSymbolIconRow","payload","show_description","should_show_category_icon","shortcode","info_from_shortcode","Shortcode","extractInfoFromShortcode","Popover","classNameTarget","classNameBubble","alignment","message","getMarketName","underlying","disable_target_icon","market","display_name","getTradeTypeName","category","isHighLow","shortcode_info","toLowerCase","includes","action_type","width","height","action","ProfitLossCell","getStatementTableColumnsTemplate","key","title","col_index","renderCellContent","cell_value","row_obj","transaction_id","map","deposit","withdrawal","sell","buy","default","Object","keys","find","x","has_sign","getProfitTableColumnsTemplate","items_count","is_footer","item_count","getOpenPositionsColumnsTemplate","profit","is_valid_to_sell","TableCell","TableRowInfo","toggleDetails","showDetails","Component","onClick","undefined","component","cells","TableRow","columns","is_header","to","cell_content","row_class_name","pathname","from_table_row","array","DataTable","resizeDimensions","debounce","window","innerWidth","window_width","el_table_body","clientHeight","clientWidth","onresize","alignHeader","data_source","length","first_body_row","firstChild","scrollbar_offset","el_table_head","offsetWidth","style","paddingRight","index","getRowAction","item","content","footer","onScroll","TableData","itemCount","itemSize","rowRenderer","bind","ref","el","autoHeight","autoHeightMax","autoHide","MobxPropTypes","arrayOrObservableArray"],"mappings":"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","file":"js/default~open_position~1833eefb.606f701a412b25853de1.js","sourcesContent":["import classNames from 'classnames';\nimport React      from 'react';\nimport PropTypes  from 'prop-types';\n\nconst available_modes = [\n    'default',\n    'success',\n    'warn',\n    'danger',\n    'info',\n    'success-invert',\n    'warn-invert',\n];\n\nconst available_sizes = [\n    'regular',\n    'large',\n];\n\nconst Label = ({ mode, children, size = 'regular' }) => {\n    const type = available_modes.some(m => m === mode) ? mode : 'default';\n    const scale = available_sizes.some(s => s === size) ? size : 'regular';\n\n    return (\n        <span className={classNames('label', {\n            [`label--${scale}`]: scale,\n            [`label--${type}`] : type,\n        })}\n        >{children}\n        </span>\n    );\n};\nLabel.propTypes = {\n    children: PropTypes.oneOfType([\n        PropTypes.arrayOf(PropTypes.node),\n        PropTypes.node,\n    ]),\n    mode: PropTypes.oneOf(available_modes),\n};\nexport default Label;\n","import PropTypes from 'prop-types';\nimport React     from 'react';\nimport Icon      from 'Assets/icon.jsx';\n\nconst EmptyTradeHistoryMessage = ({\n    has_selected_date,\n    component_icon,\n    localized_message,\n    localized_period_message,\n}) => (\n    <React.Fragment>\n        <div className='empty-trade-history'>\n            <Icon icon={component_icon} className='empty-trade-history__icon' />\n            <span className='empty-trade-history__text'>\n                {\n                    !has_selected_date ?\n                        localized_message\n                        :\n                        localized_period_message\n                }\n            </span>\n        </div>\n    </React.Fragment>\n);\n\nEmptyTradeHistoryMessage.propTypes = {\n    component_icon          : PropTypes.string,\n    has_selected_date       : PropTypes.bool,\n    localized_message       : PropTypes.string,\n    localized_period_message: PropTypes.string,\n};\n\nexport default EmptyTradeHistoryMessage;\n","import React from 'react';\n\nconst ReportsMeta = ({ i18n_heading, i18n_message, filter_component }) => (\n    <div className='reports__meta'>\n        <div className='reports__meta-description'>\n            <h1 className='reports__meta-description--heading'>\n                { i18n_heading }\n            </h1>\n            <p className='reports__meta-description--paragraph'>\n                { i18n_message }\n            </p>\n        </div>\n        {filter_component &&\n        <div className='reports__meta-filter'>\n            { filter_component }\n        </div>\n        }\n    </div>\n);\n\nexport { ReportsMeta };\n","import PropTypes from 'prop-types';\nimport React     from 'react';\nimport Loading   from '../../../templates/_common/components/loading.jsx';\n\nconst PlaceholderComponent = (props) => {\n    const EmptyMessageComponent = props.empty_message_component;\n    return (\n        <React.Fragment>\n            { props.is_empty &&\n            <EmptyMessageComponent\n                component_icon={props.component_icon}\n                has_selected_date={props.has_selected_date}\n                localized_message={props.localized_message}\n            />\n            }\n            {props.is_loading && <Loading />}\n        </React.Fragment>\n    );\n};\n\nPlaceholderComponent.propTypes = {\n    component_icon         : PropTypes.string,\n    empty_message_component: PropTypes.func,\n    has_selected_date      : PropTypes.bool,\n    localized_message      : PropTypes.string,\n};\n\nexport default PlaceholderComponent;\n","import PropTypes             from 'prop-types';\nimport React                 from 'react';\nimport ProgressSlider        from 'App/Components/Elements/PositionsDrawer/ProgressSlider/positions-progress-slider.jsx';\nimport { connect }           from 'Stores/connect';\n\nconst ProgressSliderStream = ({\n    id,\n    is_loading,\n    getPositionById,\n}) => {\n    const position = getPositionById(id);\n    if (!position) {\n        return <div />;\n    }\n\n    const { contract_info } = position;\n\n    return <ProgressSlider\n        is_loading={is_loading}\n        expiry_time={contract_info.date_expiry}\n        has_result={false}\n        current_tick={position.current_tick}\n        start_time={contract_info.date_start}\n        ticks_count={contract_info.tick_count}\n    />;\n};\n\nProgressSliderStream.propTypes = {\n    getPositionById: PropTypes.func,\n    id             : PropTypes.oneOfType([PropTypes.number, PropTypes.string]),\n    is_loading     : PropTypes.bool,\n    server_time    : PropTypes.object,\n};\n\nexport default connect(({ modules }) => ({\n    is_loading     : modules.portfolio.is_loading,\n    getPositionById: modules.portfolio.getPositionById,\n}))(ProgressSliderStream);\n","export const getProfitOrLoss = value => +value.replace(/,/g, '') >= 0 ? 'profit' : 'loss';\n","import PropTypes    from 'prop-types';\nimport React        from 'react';\nimport { localize } from 'App/i18n';\nimport Money        from 'App/Components/Elements/money.jsx';\nimport Icon         from 'Assets/icon.jsx';\n\nclass IndicativeCell extends React.PureComponent {\n    constructor(props) {\n        super(props);\n        this.state = {\n            movement: null,\n            amount  : 0,\n        };\n    }\n\n    componentWillReceiveProps(props) {\n        this.setState(() => ({\n            movement: props.amount >= this.state.amount ? 'profit' : 'loss',\n            amount  : props.amount,\n        }));\n    }\n\n    render() {\n        const { amount, currency, status } = this.props;\n        const { movement } = this.state;\n        return (\n            <div className='open-positions__indicative' >\n                <div className='open-positions__indicative--amount'>\n                    <Money amount={Math.abs(amount)} currency={currency} />\n                    {status !== 'no-resale' && amount !== 0 && <Icon icon='IconPriceMove' type={movement} />}\n                </div>\n\n                {status === 'no-resale' &&\n                <div className='open-positions__indicative-no-resale-msg indicative__no-resale-msg'>\n                    {localize('Resale not offered')}\n                </div>\n                }\n            </div>\n        );\n    }\n}\n\nIndicativeCell.propTypes = {\n    amount  : PropTypes.number,\n    currency: PropTypes.string,\n    status  : PropTypes.string,\n};\n\nexport default IndicativeCell;\n","import PropTypes          from 'prop-types';\nimport React              from 'react';\nimport { Popover }        from 'App/Components/Elements/Popover';\nimport { UnderlyingIcon } from 'App/Components/Elements/underlying-icon.jsx';\nimport Icon               from 'Assets/icon.jsx';\nimport {\n    getMarketName,\n    getTradeTypeName }    from '../Helpers/market-underlying';\nimport Shortcode          from '../Helpers/shortcode';\n\nconst MarketSymbolIconRow = ({ payload, show_description }) => {\n    const should_show_category_icon = typeof payload.shortcode === 'string';\n    const info_from_shortcode = Shortcode.extractInfoFromShortcode(payload.shortcode);\n\n    if (should_show_category_icon && info_from_shortcode) {\n        return (\n            <div className='market-symbol-icon'>\n                <div className='market-symbol-icon-name'>\n                    <Popover\n                        classNameTarget='market-symbol-icon__popover'\n                        classNameBubble='market-symbol-icon__popover-bubble'\n                        alignment='top'\n                        message={getMarketName(info_from_shortcode.underlying)}\n                        disable_target_icon\n                    >\n                        <UnderlyingIcon market={info_from_shortcode.underlying} />\n                    </Popover>\n                    {show_description && payload.display_name}\n                </div>\n\n                <div className='market-symbol-icon-category'>\n                    <Popover\n                        classNameTarget='category-type-icon__popover'\n                        classNameBubble='category-type-icon__popover-bubble'\n                        alignment='top'\n                        message={getTradeTypeName(info_from_shortcode.category)}\n                        disable_target_icon\n                    >\n                        <Icon\n                            icon='IconTradeType'\n                            type={(Shortcode.isHighLow({ shortcode_info: info_from_shortcode }))\n                                ? `${info_from_shortcode.category.toLowerCase()}_barrier`\n                                : info_from_shortcode.category.toLowerCase()}\n                        />\n                    </Popover>\n                    {show_description && info_from_shortcode.category}\n                </div>\n            </div>\n        );\n    } else if (['deposit', 'withdrawal'].includes(payload.action_type)) {\n        return (\n            <div className='market-symbol-icon'>\n                {\n                    payload.action_type === 'deposit' ? (\n                        <Icon icon='IconDeposit' />\n                    ) : (\n                        <Icon icon='IconWithdrawal' />\n                    )\n                }\n            </div>\n        );\n    }\n\n    return (\n        <svg width='32' height='32' className='unknown-icon'>\n            <rect width='32' height='32' />\n        </svg>\n    );\n};\n\nMarketSymbolIconRow.propTypes = {\n    action          : PropTypes.string,\n    payload         : PropTypes.object,\n    show_description: PropTypes.bool,\n};\n\nexport default MarketSymbolIconRow;\n","import React               from 'react';\nimport PropTypes           from 'prop-types';\nimport { getProfitOrLoss } from 'Modules/Reports/Helpers/profit-loss';\n\nconst ProfitLossCell = ({ value, children }) => {\n    const status = getProfitOrLoss(value);\n\n    return (\n        <span className={`amount--${status}`}>\n            {children}\n        </span>\n    );\n};\n\nProfitLossCell.propTypes = {\n    value: PropTypes.string,\n};\n\nexport default ProfitLossCell;\n","import classNames           from 'classnames';\nimport React                from 'react';\nimport Icon                 from 'Assets/icon.jsx';\nimport { localize }         from 'App/i18n';\nimport Label                from 'App/Components/Elements/Label/label.jsx';\nimport Money                from 'App/Components/Elements/money.jsx';\nimport ProgressSliderStream from 'App/Containers/ProgressSliderStream';\nimport { getProfitOrLoss }  from 'Modules/Reports/Helpers/profit-loss';\nimport IndicativeCell       from '../Components/indicative-cell.jsx';\nimport MarketSymbolIconRow  from '../Components/market-symbol-icon-row.jsx';\nimport ProfitLossCell       from '../Components/profit_loss_cell.jsx';\n\nconst getModeFromValue = (key) => {\n    const map = {\n        deposit   : 'warn',\n        withdrawal: 'info',\n        sell      : 'danger',\n        buy       : 'success',\n        default   : 'default',\n    };\n\n    if (Object.keys(map).find(x => x === key)) {\n        return map[key];\n    }\n\n    return map.default;\n};\n\n/* eslint-disable react/display-name, react/prop-types */\nexport const getStatementTableColumnsTemplate = (currency) => [\n    {\n        key              : 'icon',\n        title            : '',\n        col_index        : 'action_type',\n        renderCellContent: ({ cell_value, row_obj }) => (\n            <MarketSymbolIconRow\n                action={cell_value}\n                key={row_obj.transaction_id}\n                payload={row_obj}\n            />\n        ),\n    }, {\n        title    : localize('Ref. ID'),\n        col_index: 'refid',\n    }, {\n        title    : localize('Transaction time'),\n        col_index: 'date',\n    }, {\n        key              : 'mode',\n        title            : localize('Transaction'),\n        col_index        : 'action_type',\n        renderCellContent: ({ cell_value, row_obj }) => (\n            <Label mode={getModeFromValue(cell_value)}>{row_obj.action}</Label>\n        ),\n    }, {\n        title            : localize('Credit/Debit'),\n        col_index        : 'amount',\n        renderCellContent: ({ cell_value }) => <div className={`amount--${getProfitOrLoss(cell_value)}`} ><Money has_sign amount={cell_value.replace(/[,]+/g, '')} currency={currency} /></div>,\n    }, {\n        title            : localize('Balance'),\n        col_index        : 'balance',\n        renderCellContent: ({ cell_value }) => <Money amount={cell_value.replace(/[,]+/g, '')} currency={currency} />,\n    },\n];\nexport const getProfitTableColumnsTemplate = (currency, items_count) => [\n    {\n        key              : 'icon',\n        title            : '',\n        col_index        : 'action_type',\n        renderCellContent: ({ cell_value, row_obj, is_footer }) => {\n            if (is_footer) {\n                return localize('Profit/loss on the last {{item_count}} contracts', { item_count: items_count });\n            }\n\n            return (\n                <MarketSymbolIconRow\n                    action={cell_value}\n                    key={row_obj.transaction_id}\n                    payload={row_obj}\n                />\n            );\n        },\n    }, {\n        title    : localize('Ref. ID'),\n        col_index: 'transaction_id',\n    }, {\n        title    : localize('Buy time'),\n        col_index: 'purchase_time',\n    }, {\n        title            : localize('Buy price'),\n        col_index        : 'buy_price',\n        renderCellContent: ({ cell_value, is_footer }) => {\n            if (is_footer) return '';\n\n            return <Money amount={cell_value} currency={currency} />;\n        },\n    }, {\n        title    : localize('Sell time'),\n        col_index: 'sell_time',\n    }, {\n        title            : localize('Sell price'),\n        col_index        : 'sell_price',\n        renderCellContent: ({ cell_value, is_footer }) => {\n            if (is_footer) return '';\n\n            return <Money amount={cell_value} currency={currency} />;\n        },\n    }, {\n        title            : localize('Profit/Loss'),\n        col_index        : 'profit_loss',\n        renderCellContent: ({ cell_value }) => (\n            <ProfitLossCell value={cell_value}>\n                <Money has_sign amount={cell_value.replace(/[,]+/g, '')} currency={currency} />\n            </ProfitLossCell>\n        ),\n    },\n];\nexport const getOpenPositionsColumnsTemplate = (currency) => [\n    {\n        title            : '',\n        col_index        : 'type',\n        renderCellContent: ({ cell_value, row_obj, is_footer }) => {\n            if (is_footer) return localize('Total');\n\n            return (\n                <MarketSymbolIconRow\n                    action={cell_value}\n                    key={row_obj.id}\n                    payload={row_obj.contract_info}\n                />\n            );\n        },\n    }, {\n        title    : localize('Ref. ID'),\n        col_index: 'reference',\n    }, {\n        title            : localize('Buy price'),\n        col_index        : 'purchase',\n        renderCellContent: ({ cell_value }) => (\n            <Money amount={cell_value} currency={currency} />\n        ),\n    }, {\n        title            : localize('Potential payout'),\n        col_index        : 'payout',\n        renderCellContent: ({ cell_value }) => (\n            cell_value ? <Money amount={cell_value} currency={currency} />\n                : <span>-</span>\n        ),\n    }, {\n        title            : localize('Potential profit/loss'),\n        col_index        : 'profit',\n        renderCellContent: ({ row_obj }) => {\n            if (!row_obj.contract_info || !row_obj.contract_info.profit) return;\n            const profit = row_obj.contract_info.profit;\n            // eslint-disable-next-line consistent-return\n            return (\n                <div className={classNames('open-positions__profit-loss', {\n                    'open-positions__profit-loss--negative': (\n                        profit < 0\n                    ),\n                    'open-positions__profit-loss--positive': (\n                        profit > 0\n                    ),\n                })}\n                >\n                    <Money amount={Math.abs(profit)} currency={currency} />\n                    <div className='open-positions__profit-loss--movement'>\n                        <Icon icon='IconPriceMove' type={profit > 0 ? 'profit' : 'loss'} />\n                    </div>\n                </div>\n            );\n        },\n    }, {\n        title            : localize('Indicative price'),\n        col_index        : 'indicative',\n        renderCellContent: ({ cell_value, row_obj }) => (\n            <IndicativeCell amount={+cell_value} currency={currency} status={row_obj.contract_info && !row_obj.is_valid_to_sell ? 'no-resale' : ''} />\n        ),\n    }, {\n        title            : localize('Remaining time'),\n        col_index        : 'id',\n        renderCellContent: ({ cell_value }) => (\n            <ProgressSliderStream id={cell_value} />\n        ),\n    },\n];\n/* eslint-enable react/display-name, react/prop-types */\n","import classNames from 'classnames';\nimport PropTypes  from 'prop-types';\nimport React      from 'react';\n\nconst TableCell = ({ col_index, children }) => (\n    <div className={classNames('table__cell', col_index)}>\n        {children}\n    </div>\n);\n\nTableCell.propTypes = {\n    children: PropTypes.oneOfType([\n        PropTypes.node,\n        PropTypes.string,\n    ]),\n    col_index: PropTypes.string,\n};\n\nexport default TableCell;\n","import classNames from 'classnames';\nimport PropTypes  from 'prop-types';\nimport React      from 'react';\n\nexport default class TableRowInfo extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            showDetails: false,\n        };\n    }\n\n    toggleDetails = () => {\n        if (this.props.replace) {\n            this.setState(state => ({ showDetails: !state.showDetails }));\n        }\n    };\n\n    render() {\n        return (\n            <div\n                onClick={this.props.is_footer || !this.props.replace ? undefined : this.toggleDetails}\n                className={classNames(this.props.className, { 'statement__row--detail': this.state.showDetails })}\n            >\n                {\n                    this.state.showDetails ?\n                        <div>\n                            {this.props.replace.component ?\n                                this.props.replace.component\n                                :\n                                <p>{this.props.replace.message}</p>\n                            }\n                        </div>\n                        : this.props.cells\n                }\n            </div>\n        );\n    }\n}\n\nTableRowInfo.propTypes = {\n    cells    : PropTypes.arrayOf(PropTypes.node),\n    className: PropTypes.string,\n    replace  : PropTypes.object,\n};\n","import classNames   from 'classnames';\nimport PropTypes    from 'prop-types';\nimport React        from 'react';\nimport { NavLink }  from 'react-router-dom';\nimport TableCell    from './table-cell.jsx';\nimport TableRowInfo from './table-row-info.jsx';\n\nconst TableRow = ({\n    className,\n    columns,\n    is_footer,\n    is_header,\n    replace,\n    row_obj = {},\n    to,\n}) => {\n    const cells = columns.map(({ col_index, renderCellContent, title, key }) => {\n        let cell_content = title;\n        if (!is_header) {\n            const cell_value = row_obj[col_index] || '';\n            cell_content = renderCellContent\n                ? renderCellContent({ cell_value, col_index, row_obj, is_footer })\n                : cell_value;\n        }\n\n        return (\n            <TableCell col_index={col_index} key={key || col_index}>\n                {cell_content}\n            </TableCell>\n        );\n    });\n\n    const row_class_name = classNames('table__row', { 'table__row-link': to || replace }, { [`${className}__row`]: className });\n\n    return (\n        to ?\n            <NavLink\n                className={row_class_name}\n                to={{\n                    pathname: to,\n                    state   : {\n                        from_table_row: true,\n                    },\n                }}\n            >\n                {cells}\n            </NavLink>\n            :\n            <TableRowInfo\n                className={row_class_name}\n                cells={cells}\n                replace={replace}\n                is_footer={is_footer}\n            />\n    );\n};\n\nTableRow.propTypes = {\n    className: PropTypes.string,\n    columns  : PropTypes.array,\n    is_footer: PropTypes.bool,\n    is_header: PropTypes.bool,\n    replace  : PropTypes.object,\n    row_obj  : PropTypes.object,\n    to       : PropTypes.string,\n};\n\nexport default TableRow;\n","import classNames                     from 'classnames';\nimport debounce                       from 'lodash.debounce';\nimport { PropTypes as MobxPropTypes } from 'mobx-react';\nimport { FixedSizeList as List }      from 'react-window';\nimport { Scrollbars }                 from 'tt-react-custom-scrollbars';\nimport PropTypes                      from 'prop-types';\nimport React                          from 'react';\nimport TableRow                       from './table-row.jsx';\n\n/* TODO:\n      1. implement sorting by column (ASC/DESC)\n      2. implement filtering per column\n*/\n\nclass DataTable extends React.PureComponent {\n    constructor(props) {\n        super(props);\n        this.state = {\n            height      : 200,\n            width       : 200,\n            window_width: 1024,\n        };\n    }\n\n    resizeDimensions = debounce(() => {\n        this.setState({\n            width       : (window.innerWidth - this.state.window_width) + this.state.width,\n            window_width: window.innerWidth,\n        });\n    }, 250);\n\n    componentDidMount() {\n        this.setState({\n            height      : this.el_table_body.clientHeight,\n            width       : this.el_table_body.clientWidth,\n            window_width: window.innerWidth,\n        });\n        window.onresize = this.resizeDimensions;\n    }\n\n    // eslint-disable-next-line class-methods-use-this\n    componentWillUnmount() {\n        window.onresize = null;\n    }\n\n    componentDidUpdate() {\n        this.alignHeader();\n    }\n\n    alignHeader() {\n        // scrollbar inside table-body can push content (depending on the browser and if mouse is plugged in)\n        if (!this.props.data_source.length) return;\n        const first_body_row   = this.el_table_body.firstChild;\n        const scrollbar_offset = this.el_table_head.offsetWidth - first_body_row.offsetWidth;\n        this.el_table_head.style.paddingRight = `${scrollbar_offset}px`;\n    }\n\n    rowRenderer ({\n        index,       // Index of row\n        style,        // Style object to be applied to row (to position it);\n    }) {\n        const {\n            data_source,\n            className,\n            getRowAction,\n            columns,\n            id } = this.props;\n        const item = data_source[index];\n        const action = getRowAction && getRowAction(item);\n\n        // If row content is complex, consider rendering a light-weight placeholder while scrolling.\n        const content = (\n            <TableRow\n                className={className}\n                row_obj={item}\n                columns={columns}\n                key={id}\n                to={typeof action === 'string' ? action : undefined}\n                replace={typeof action === 'object' ? action : undefined}\n            />\n        );\n\n        return (\n            <div style={style}>\n                {content}\n            </div>\n        );\n    }\n\n    render() {\n        const {\n            children,\n            className,\n            columns,\n            data_source,\n            footer,\n            is_empty,\n            onScroll,\n        } = this.props;\n\n        const TableData =\n\n            <React.Fragment>\n                <List\n                    className={className}\n                    height={this.state.height}\n                    itemCount={data_source.length}\n                    itemSize={63}\n                    width={this.state.width}\n                >\n                    {this.rowRenderer.bind(this)}\n                </List>\n                {children}\n            </React.Fragment>;\n\n        return (\n            <div className={classNames('table', {\n                [`${className}`]         : className,\n                [`${className}__table`]  : className,\n                [`${className}__content`]: className,\n            })}\n            >\n                <div className='table__head' ref={el => { this.el_table_head = el; }}>\n                    <TableRow className={className} columns={columns} is_header />\n                </div>\n                <div\n                    className='table__body'\n                    onScroll={onScroll}\n                    ref={el => { this.el_table_body = el; }}\n                >\n                    {is_empty ?\n                        TableData\n                        :\n                        <Scrollbars\n                            autoHeight\n                            autoHeightMax={this.state.height}\n                            autoHide\n                        >\n                            {TableData}\n                        </Scrollbars>\n                    }\n                </div>\n\n                {footer &&\n                    <div className='table__foot'>\n                        <TableRow\n                            className={className}\n                            row_obj={footer}\n                            columns={columns}\n                            is_footer\n                        />\n                    </div>\n                }\n            </div>\n        );\n    }\n}\n\nDataTable.propTypes = {\n    children: PropTypes.oneOfType([\n        PropTypes.node,\n        PropTypes.arrayOf(PropTypes.node),\n    ]),\n    className   : PropTypes.string,\n    columns     : PropTypes.array,\n    data_source : MobxPropTypes.arrayOrObservableArray,\n    footer      : PropTypes.object,\n    getRowAction: PropTypes.func,\n    onScroll    : PropTypes.func,\n};\n\nexport default DataTable;\n"],"sourceRoot":""}