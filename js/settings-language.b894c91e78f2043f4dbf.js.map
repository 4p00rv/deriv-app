{"version":3,"sources":["webpack:///./App/Containers/SettingsModal/settings-language.jsx"],"names":["isCurrentLanguage","lang","NonClickableLink","_ref","children","createElement","id","concat","className","LanguageLink","_ref2","Fragment","icon","type","replace","toLowerCase","propTypes","string","oneOfType","arrayOf","node","isRequired","i18n_default_text","Object","keys","map","key","href"],"mappings":"4GAAA,mFAOIA,EAAoB,SAA2BC,GACjD,OAAOA,IAAS,KAGdC,EAAmB,SAA0BC,GAC/C,IAAIC,EAAWD,EAAKC,SAChBH,EAAOE,EAAKF,KAChB,OAAO,IAAMI,cAAc,MAAO,CAChCC,GAAI,eAAeC,OAAON,EAAM,WAChCO,UAAW,IAAW,mCAAoC,CACxD,2CAA4CR,EAAkBC,MAE/DG,IAGDK,EAAe,SAAsBC,GACvC,IAAIT,EAAOS,EAAMT,KACjB,OAAO,IAAMI,cAAc,IAAMM,SAAU,KAAM,IAAMN,cAAc,IAAM,CACzEO,KAAM,kBACNJ,UAAW,yEACXK,KAAMZ,EAAKa,QAAQ,SAAU,KAAKC,gBAChC,IAAMV,cAAc,OAAQ,CAC9BG,UAAW,IAAW,mCAAoC,CACxD,2CAA4CR,EAAkBC,MAE/D,cAAsBA,MAgC3BQ,EAAaO,UAAY,CACvBf,KAAM,IAAUgB,QAElBf,EAAiBc,UAAY,CAC3BZ,SAAU,IAAUc,UAAU,CAAC,IAAUC,QAAQ,IAAUC,MAAO,IAAUA,OAAOC,WACnFpB,KAAM,IAAUgB,QAEH,UApCQ,WACrB,OAAO,IAAMZ,cAAc,MAAO,CAChCG,UAAW,qBACV,IAAMH,cAAc,MAAO,CAC5BG,UAAW,sCACV,IAAMH,cAAc,OAAQ,KAAM,IAAMA,cAAc,IAAU,CACjEiB,kBAAmB,sBACf,IAAMjB,cAAc,MAAO,CAC/BG,UAAW,yCACVe,OAAOC,KAAK,eAAuBC,IAAI,SAAUC,GAClD,OAAO1B,EAAkB0B,GAAO,IAAMrB,cAAcH,EAAkB,CACpED,KAAMyB,EACNA,IAAKA,GACJ,IAAMrB,cAAcI,EAAc,CACnCR,KAAMyB,KACF,IAAMrB,cAAc,IAAK,CAC7BC,GAAI,eAAeC,OAAOmB,EAAK,WAC/BA,IAAKA,EACLC,KAAM,YAAOD,GACblB,UAAW,IAAW,mCAAoC,CACxD,2CAA4CR,EAAkB0B,MAE/D,IAAMrB,cAAcI,EAAc,CACnCR,KAAMyB,EACNA,IAAKA","file":"js/settings-language.b894c91e78f2043f4dbf.js","sourcesContent":["import classNames from 'classnames';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport Localize from 'App/Components/Elements/localize.jsx';\nimport Icon from 'Assets/icon.jsx';\nimport { getAllowedLanguages, getURL, currentLanguage } from 'Utils/Language';\n\nvar isCurrentLanguage = function isCurrentLanguage(lang) {\n  return lang === currentLanguage;\n};\n\nvar NonClickableLink = function NonClickableLink(_ref) {\n  var children = _ref.children,\n      lang = _ref.lang;\n  return React.createElement(\"div\", {\n    id: \"dt_settings_\".concat(lang, \"_button\"),\n    className: classNames('settings-language__language-link', {\n      'settings-language__language-link--active': isCurrentLanguage(lang)\n    })\n  }, children);\n};\n\nvar LanguageLink = function LanguageLink(_ref2) {\n  var lang = _ref2.lang;\n  return React.createElement(React.Fragment, null, React.createElement(Icon, {\n    icon: \"IconCountryFlag\",\n    className: 'settings-language__language-link-flag settings-language__language-flag',\n    type: lang.replace(/(\\s|_)/, '-').toLowerCase()\n  }), React.createElement(\"span\", {\n    className: classNames('settings-language__language-name', {\n      'settings-language__language-name--active': isCurrentLanguage(lang)\n    })\n  }, getAllowedLanguages()[lang]));\n};\n\nvar LanguageSettings = function LanguageSettings() {\n  return React.createElement(\"div\", {\n    className: \"settings-language\"\n  }, React.createElement(\"div\", {\n    className: \"settings-language__language-header\"\n  }, React.createElement(\"span\", null, React.createElement(Localize, {\n    i18n_default_text: \"Select language\"\n  }))), React.createElement(\"div\", {\n    className: \"settings-language__language-container\"\n  }, Object.keys(getAllowedLanguages()).map(function (key) {\n    return isCurrentLanguage(key) ? React.createElement(NonClickableLink, {\n      lang: key,\n      key: key\n    }, React.createElement(LanguageLink, {\n      lang: key\n    })) : React.createElement(\"a\", {\n      id: \"dt_settings_\".concat(key, \"_button\"),\n      key: key,\n      href: getURL(key),\n      className: classNames('settings-language__language-link', {\n        'settings-language__language-link--active': isCurrentLanguage(key)\n      })\n    }, React.createElement(LanguageLink, {\n      lang: key,\n      key: key\n    }));\n  })));\n};\n\nLanguageLink.propTypes = {\n  lang: PropTypes.string\n};\nNonClickableLink.propTypes = {\n  children: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.node), PropTypes.node]).isRequired,\n  lang: PropTypes.string\n};\nexport default LanguageSettings;"],"sourceRoot":""}